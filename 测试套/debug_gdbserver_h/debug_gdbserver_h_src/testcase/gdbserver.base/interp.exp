#!/usr/bin/expect -f
# Copyright 2004-2005, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# interp.exp   Test interpreter-exec command

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "interp"
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"


#if { [prepare_for_testing ${testfile}.exp ${testfile} ${testfile}.c {debug}] } {
#    return -1
#}

# Do not use gdb_test for this test, since it has two prompts.
set cmd "interpreter-exec mi \"-var-update *\""


gdb_test "$cmd" "\\^done,changelist=\\\[\\\].*$gdb_prompt"
gdb_test "interpreter-exec console \"show version\"" "GNU gdb .*"

# Regression test for crash when an exception occurs in mi_parse.   
gdb_test "interpreter-exec mi \"-break-insert --thread a\"" "\\^error,msg=\"Invalid value for the '--thread' option\".*$gdb_prompt"

set cmd "interpreter-exec mi \"-stack-info-frame\""
#gdb_test "$cmd" ".error,msg=.No registers\...*$gdb_prompt" 
gdb_test "$cmd" "done,frame=.*$gdb_prompt"

set cmd "interpreter-exec mi1 \"-break-insert main\""
gdb_test  "$cmd" ".done.bkpt=.number=.\[0-9\]\[^\n\]+.*$gdb_prompt"

set cmd "interpreter-exec mi2 \"-break-insert main\""
gdb_test "$cmd" ".done.bkpt=.number=.\[0-9\]\[^\n\]+.*$gdb_prompt"

set cmd "interpreter-exec mi3 \"-break-insert main\""
gdb_test "$cmd" ".done.bkpt=.number=.\[0-9\]\[^\n\]+.*$gdb_prompt"

#if ![runto_main] then {
#  fail "run to main"
#  return -1;
#}

gdb_test "b main" ""
gdb_test "c" ""

gdb_test "list" ".*\[0-9\].*main \\(int argc.*" "can list sources"
gdb_exit
exit $GRET

interact
