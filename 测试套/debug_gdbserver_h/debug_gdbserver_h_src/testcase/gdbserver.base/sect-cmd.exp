#!/usr/bin/expect -f
# Copyright 1997-1999, 2003, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#
# test running programs
#

# This test exists solely to exercise the "section" command for
# code-coverage on HP-UX.  (So far as I can tell, the "section"
# command isn't needed on HP-UX, but probably is for embedded
# apps.)
#
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "sect-cmd"
set srcfile break.c
set srcfile1 break1.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

#if ![istarget "hppa*-*-hpux*"] then {
#  return
#}

#set binfile ${objdir}/${subdir}/${testfile}

#if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug nowarnings}] != "" } {
#    untested sect-cmd.exp
#    return -1
#}

#if { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug nowarnings}] != "" } {
#    untested sect-cmd.exp
#    return -1
#}

#if { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug nowarnings}] != "" } {
#    untested sect-cmd.exp
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}

#if ![runto_main] then { fail "section command tests suppressed" }

gdb_test "set height 1000" "$gdb_prompt"
gdb_test "b main" ""
gdb_test "c " ""

# Get the $CODE$ section's starting address.
#
# (Note that this works for PA32 programs, which use the SOM file
# format.  PA64 uses ELF, and when support for that is added, it's
# not clear that there'll be a section named "$CODE$" in such
# programs.)
#

set address1 ""
set address2 ""
send "info files\n"
expect {
  -re ".*(0x\[0-9a-fA-F\]*) - (0x\[0-9a-fA-F\]*) is .(CODE|text).*$gdb_prompt"\
          {pass "info files"
	   set address1 $expect_out(1,string)
	   set address2 $expect_out(2,string)}
  timeout {fail "(timeout) info files"}
}

# Reset the section to that same starting address, which should be
# harmless (i.e., we just want to exercise the section command).
#
#if [istarget "hppa2.0w-*-*"] then {
#  send "section \.text $address1\n"
#  expect {
#    -re ".*$address1 \- $address2 is .text.*$gdb_prompt"\
#            {pass "set section command"}
#    timeout {fail "(timeout) set section command"}
#  }
#} else {
  send "section \$CODE\$ $address1\n"
  expect {
    -re ".*$address1 \- $address2 is .CODE..*$gdb_prompt"\
            {pass "set section command"}
    timeout {fail "(timeout) set section command"}
  }
#}

# Verify that GDB responds gracefully to a non-existent section name.
#
send "section FOOBARBAZ 0x1234\n"
expect {
  -re "Section FOOBARBAZ not found.*$gdb_prompt"\
          {pass "non-existent section disallowed"}
  timeout {fail "(timeout) non-existent section disallowed"}
}

# We "happen to know" that GDB uses a fixed size character buffer to
# parse the section name into, and the buffer is declared to be 100
# characters in length.  Verify that GDB gracefully handles section
# names longer than that.  (The section is also non-existent.)
#
send "section A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123 0x1234\n"
expect {
  -re "Section A23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789 not found.*$gdb_prompt"\
          {pass "non-existent too-long section disallowed"}
  timeout {fail "(timeout) non-existent too-long section disallowed"}
}

gdb_exit
exit $GRET

interact
