#!/usr/bin/expect -f
# Copyright 2011-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Pierre Muller <muller@ics.u-strasbg.fr>
#
# Check if environment variables are correctly passed to inferiors
#

# There's no support for passing environment variables in the remote protocol.
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "testenv"
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

# make sure $pc is sane, in case we're talking to a board.
#if { ![runto_main] } {
#    gdb_suppress_tests;
#}

gdb_test "b main" 
gdb_test "c"
set bp_line [gdb_get_line_number "set breakpoint here"]
gdb_breakpoint  $bp_line

gdb_test_no_output "set env TEST_GDB_VAR1 test1" \
  "Set TEST_GDB_VAR1"

gdb_test_no_output "set env TEST_GDB_VAR2 test2" \
  "Set TEST_GDB_VAR2"

#runto_main
# Third test with two TEST_GDB_VAR
gdb_test "continue"  "set breakpoint here.*$gdb_prompt"
#  ".*Program found 2 variables starting with TEST_GDB.*" \
#  "Test with two TEST_GDB var"

gdb_test_no_output "unset env TEST_GDB_VAR1" \
  "Unset TEST_GDB_VAR1"

gdb_exit
exit $GRET

interact
runto_main
gdb_breakpoint  $bp_line

# Fourth test with one TEST_GDB_VAR left, after one was removed
# with unset command.
gdb_test "continue"  \
  ".*Program found 1 variables starting with TEST_GDB.*" \
  "Test with one TEST_GDB var, after unset"

gdb_exit

set env(TEST_GDB_GLOBAL) "Global environment value"

clean_restart $binfile

# make sure $pc is sane, in case we're talking to a board.
if { ![runto_main] } {
    gdb_suppress_tests;
}

set bp_line [gdb_get_line_number "set breakpoint here"]
gdb_breakpoint  $bp_line

gdb_test "show env" ".*TEST_GDB_GLOBAL=.*" "Test passing TEST_GDB_GLOBAL to GDB"
# First test with only inherited TEST_GDB_GLOBAL
gdb_test "continue" \
  ".*TEST_GDB_GLOBAL=Global environment value.*Program found 1 variables starting with TEST_GDB.*" \
  "Test with TEST_GDB_GLOBAL"

gdb_test_no_output "unset env TEST_GDB_GLOBAL" \
  "Unset TEST_GDB_GLOBAL"

runto_main
gdb_breakpoint  $bp_line

# Second test with one TEST_GDB_VAR
gdb_test "continue" \
  ".*Program found 0 variables starting with TEST_GDB.*" \
  "Test with TEST_GDB_GLOBAL unset"

gdb_exit

# Clear environment in case we're doing multiple runs
unset env(TEST_GDB_GLOBAL)

gdb_exit
exit $GRET

interact
