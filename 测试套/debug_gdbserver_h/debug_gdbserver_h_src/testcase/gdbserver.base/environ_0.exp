#!/usr/bin/expect -f
# Copyright 1997-1999, 2003, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#
# test running programs
#

# This test exists solely to exercise the "environment" commands for
# code-coverage on HP-UX.
#
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "break"
set srcfile ${testfile}.c
set srcfile1 ${testfile}1.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

#if ![istarget "hppa*-*-hpux*"] then {
#  return
#}

#set binfile ${objdir}/${subdir}/${testfile}

#if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug nowarnings}] != "" } {
#    untested environ.exp
#    return -1
#}
#
#if { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug nowarnings}] != "" } {
#    untested environ.exp
#    return -1
#}

#if { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug nowarnings}] != "" } {
#    untested environ.exp
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}

if ![runto_main] then { fail "environment command tests suppressed" }
gdb_test "c" ""

# (No, this is not really related to the environment commands.  But it's
# a convenient place to verify that this command works.)
#

#send "info program\n"
#expect {
#  -re ".*Using the running image of child process \[0-9\]*.\r\nProgram stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped at breakpoint 1..*$gdb_prompt"\
#          {pass "info program"}
#  timeout {fail "(timeout) info program"}
#}

gdb_test "info program" "Program stopped at.*It stopped at breakpoint 1.*$gdb_prompt"


# We don't really care where this step lands, so long as it gets
# the inferior pushed off the breakpoint it's currently on...
#
send "next\n"
expect {
  -re ".*$gdb_prompt"\
          {pass "step before info program"}
  timeout {fail "(timeout) step before info program"}
}
#send "info program\n"
#expect {
#  -re ".*Using the running image of child process \[0-9\]*.\r\nProgram stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped after being stepped..*$gdb_prompt"\
#          {pass "info program after step"}
#  timeout {fail "(timeout) info program after step"}
#}

gdb_test "info program" "Program stopped at.*It stopped after being stepped.*$gdb_prompt"

gdb_exit
exit $GRET

interact

if ![runto_main] then { fail "environment command tests suppressed" }

send "delete\n"
expect {
  -re ".*y or n. $"\
          {send "y\n"
           expect {
             -re ".*$gdb_prompt"\
                     {pass "delete breakpoint before info program"}
             timeout {fail "(timeout) delete breakpoint before info program"}
           }
          }
  timeout {fail "(timeout) delete breakpoint before info program"}
}
send "info program\n"
expect {
#  -re ".*Using the running image of child process \[0-9\]*.\r\nProgram stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped at a breakpoint that has since been deleted..*$gdb_prompt"\
  -re "Program stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped at a breakpoint that has since been deleted..*$gdb_prompt"\
          {pass "info program after deleted breakpoint"}
  timeout {fail "(timeout) info program after deleted breakpoint"}
}

# Verify that we can show all currently-set environment variables.
# (It's a bit hacky, but nonetheless probably safe to check for at
# least the SHELL variable.)
#
# need to increase timeout because of very long output
set oldtimeout $timeout
set timeout [expr "$timeout + 300"]

send "show environment\n"
expect {
  -re ".*SHELL=(\[a-zA-Z0-9\]*).*$gdb_prompt"\
          {pass "show environment"}
  timeout {fail "(timeout) show environment"}
}
set timeout $oldtimeout

# Verify that we can unset a specific environment variable.
#
send "unset environment EDITOR\n"
expect {
  -re "$gdb_prompt"\
          {pass "issue unset environment"}
  timeout {fail "(timeout) issue unset environment"}
}
send "show environment EDITOR\n"
expect {
  -re "Environment variable \"EDITOR\" not defined.\r\n$gdb_prompt"\
          {pass "unset environment"}
  timeout {fail "(timeout) unset environment"}
}

# Verify that we can unset all environment variables.
#
send "unset environment\n"
expect {
  -re "Delete all environment variables.*y or n. $"\
          {send "y\n"
           expect {
             -re "$gdb_prompt"\
                     {pass "unset entire environment"}
             timeout {fail "(timeout) unset entire environment"}
           }
          }
  timeout {fail "(timeout) unset entire environment"}
}

# Verify that we can set a specific environment variable.
#
send "set environment EDITOR emacs\n"
expect {
  -re "$gdb_prompt"\
          {pass "issue set environment"}
  timeout {fail "(timeout) issue set environment"}
}
send "show environment EDITOR\n"
expect {
  -re "EDITOR = emacs\r\n$gdb_prompt"\
          {pass "set environment"}
  timeout {fail "(timeout) set environment"}
}

# Verify that GDB responds gracefully to a request to set environment,
# with no variable name.
#
send "set environment\n"
expect {
  -re "Argument required .environment variable and value..*$gdb_prompt"\
          {pass "set environment without variable disallowed"}
  timeout {fail "(timeout) set environment without variable disallowed"}
}

# I'm not sure just what GDB has in mind in explicitly checking
# for this variant, but since GDB handles it, test it.
#
send "set environment =\n"
expect {
  -re "Argument required .environment variable to set..*$gdb_prompt"\
          {pass "set environment equals without variable disallowed"}
  timeout {fail "(timeout) set environment equals without variable disallowed"}
}

# Setting an environment variable without a value sets it to a NULL
# value.
#
send "set environment EDITOR\n"
expect {
  -re "Setting environment variable \"EDITOR\" to null value..*$gdb_prompt"\
          {pass "issue set environment without variable value"}
  timeout {fail "(timeout) issue set environment without variable value"}
}
send "show environment EDITOR\n"
expect {
  -re "EDITOR = \r\n$gdb_prompt"\
          {pass "set environment without variable value"}
  timeout {fail "(timeout) set environment without variable value"}
}

# Verify that GDB responds gracefully to an attempt to show a
# non-existent environment variable.  (We hope this variable is
# undefined!)
#
send "show environment FOOBARBAZGRUNGESPAZBALL\n"
expect {
  -re "Environment variable \"FOOBARBAZGRUNGESPAZBALL\" not defined..*$gdb_prompt"\
          {pass "show non-existent environment variable disallowed"}
  timeout {fail "(timeout) show non-existent environment variable disallowed"}
}

# Verify that GDB can set an environment variable hitherto undefined.
#
send "set environment FOOBARBAZGRUNGESPAZBALL t\n"
expect {
  -re "$gdb_prompt"\
          {pass "issue set environment for previously undefined variable"}
  timeout {fail "(timeout) issue set environment for previously undefined variable"}
}
send "show environment FOOBARBAZGRUNGESPAZBALL\n"
expect {
  -re "FOOBARBAZGRUNGESPAZBALL = t\r\n$gdb_prompt"\
          {pass "set environment for previously undefined variable"}
  timeout {fail "(timeout) set environment for previously undefined variable"}
}

# Verify that GDB can also set an environment variable using the "="
# syntax.
#
send "set environment FOOBARBAZGRUNGESPAZBALL = t\n"
expect {
  -re "$gdb_prompt"\
          {pass "issue set environment with equals"}
  timeout {fail "(timeout) issue set environment with equals"}
}
send "show environment FOOBARBAZGRUNGESPAZBALL\n"
expect {
  -re "FOOBARBAZGRUNGESPAZBALL = t\r\n$gdb_prompt"\
          {pass "set environment with equals"}
  timeout {fail "(timeout) set environment with equals"}
}

# Verify that GDB can set an environment variable to a value that has
# an embedded (trailing, in this case) equals.
#
send "set environment FOOBARBAZGRUNGESPAZBALL t=\n"
expect {
  -re "$gdb_prompt"\
          {pass "issue set environment with trailing equals"}
  timeout {fail "(timeout) issue set environment with trailing equals"}
}
send "show environment FOOBARBAZGRUNGESPAZBALL\n"
expect {
  -re "FOOBARBAZGRUNGESPAZBALL = t=\r\n$gdb_prompt"\
          {pass "set environment with trailing equals"}
  timeout {fail "(timeout) set environment with trailing equals"}
}

# Verify that GDB can set an environment variable to a value preceded
# by whitespace, and that such whitespace is ignored (not included
# in the set value).
#
send "set environment FOOBARBAZGRUNGESPAZBALL =     foo\n"
expect {
  -re "$gdb_prompt"\
          {pass "issue set environment with preceding whitespace"}
  timeout {fail "(timeout) issue set environment with preceding whitespace"}
}
send "show environment FOOBARBAZGRUNGESPAZBALL\n"
expect {
  -re "FOOBARBAZGRUNGESPAZBALL = foo\r\n$gdb_prompt"\
          {pass "set environment with preceding whitespace"}
  timeout {fail "(timeout) set environment with preceding whitespace"}
}

# Verify that GDB can manipulate the distinguished PATH variable.
#
send "path /tmp/FOOBARBAZGRUNGESPAZBALL\n"
expect {
  -re ".*Executable and object file path: /tmp/FOOBARBAZGRUNGESPAZBALL.*$gdb_prompt"\
          {pass "issue path"}
  timeout {fail "(timeout) issue path"}
}
send "show paths\n"
expect {
  -re "Executable and object file path: /tmp/FOOBARBAZGRUNGESPAZBALL.*$gdb_prompt"\
          {pass "show paths"}
  timeout {fail "(timeout) show paths"}
}

gdb_exit
exit $GRET

interact
