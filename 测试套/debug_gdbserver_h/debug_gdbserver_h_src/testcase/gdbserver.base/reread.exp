#!/usr/bin/expect -f
# Copyright 1998, 2000-2001, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set EXEEXT .exe
set testfile "reread"
set testfile1 "reread1"
set srcfile1 ${testfile1}.c
set binfile1 ${testfile1}$EXEEXT
set testfile2 "reread2"
set srcfile2 ${testfile2}.c
set binfile2 ${testfile2}$EXEEXT
set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "cp  -f $testfile1 $testfile" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

set prototypes 1

# build the first test case

# Cygwin needs $EXEEXT.

#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile1}" executable {debug nowarnings}] != "" } {
#    untested reread.exp
#    return -1
#}

# build the second test case


#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile2}" "${binfile2}" executable {debug nowarnings}] != ""
#      && [gdb_compile "${srcdir}/${subdir}/${srcfile2}" "${binfile2}" executable {debug nowarnings additional_flags=-DNO_SECTIONS}] != ""} {
#    untested reread.exp
#    return -1
#}

# Start with a fresh gdb.

set binfile ${testfile}$EXEEXT

#   gdb_start
#gdb_reinitialize_dir $srcdir/$subdir

# Load the first executable.

#gdb_rename_execfile ${binfile1} ${binfile}
#gdb_load ${binfile}

# Set a breakpoint at foo

gdb_test "break foo" \
    "Breakpoint.*at.* file .*$srcfile1, line 14.*" \
    "breakpoint foo in first file"


# Run, should see "Breakpoint 1, foo () at hello1.c:14"
send "c\n"
expect {
    -re ".*Breakpoint.* foo .* at .*$srcfile1:14.*$gdb_prompt"  {
	pass "run to foo()";
    }
    timeout { fail "run to foo() (timeout)"  }
}

# Restore first executable to its original name, and move
# second executable into its place.  Ensure that the new
# executable is at least a second newer than the old.

#gdb_rename_execfile ${binfile} ${binfile1}
#gdb_rename_execfile ${binfile2} ${binfile}

gdb_test "shell cp -f ${binfile2} ${binfile}" "$gdb_prompt"
gdb_test "shell sleep 1" ".*" ""
#gdb_touch_execfile ${binfile}

# Run a second time; GDB should detect that the executable has changed
# and reset the breakpoints correctly.
# Should see "Breakpoint 1, foo () at reread2.c:9"

#if [is_remote target] {
#    unsupported "run to foo() second time ";
#} else {
#gdb_run_cmd
    send "c\n"
    expect {
	#    -re ".*re-reading symbols.*Breakpoint.* foo .* at .*$srcfile2:9.*$gdb_prompt $" {}
	-re ".*Breakpoint.* foo .* at .*:9.*$gdb_prompt" {
	    pass "run to foo() second time ";
	}
	timeout { 
	    fail "run to foo() second time (timeout)" ; 
	}
    }
#}


### Second pass: verify that GDB checks the executable file's
### timestamp when the program is *restarted*, not just when it exits.

#if [is_remote target] {
#    unsupported "second pass: GDB should check for changes before running"
#} else {

    # Put the older executable back in place.
#    gdb_rename_execfile ${binfile} ${binfile2}
#    gdb_rename_execfile ${binfile1} ${binfile}

    gdb_test "shell cp -f ${binfile1} ${binfile}" "$gdb_prompt"

    # Restart GDB entirely.
#    gdb_start
#    gdb_reinitialize_dir $srcdir/$subdir
#    gdb_load ${binfile}

    # Set a breakpoint on foo and run to it.
    gdb_test "break foo" \
            "Breakpoint.*at.* file .*$srcfile1, line 14.*" \
            "second pass: breakpoint foo in first file"
    send "c\n"
    expect {
        -re ".*Breakpoint.* foo .* at .*$srcfile1:14.*$gdb_prompt"  {
            pass "second pass: run to foo()";
        }
        timeout {
            fail "second pass: run to foo() (timeout)"
        }
    }

    # This time, let the program run to completion.  If GDB checks the
    # executable file's timestamp now, it won't notice any change.
    gdb_continue_to_end "second pass"
    
    # Now move the newer executable into place, and re-run.  GDB
    # should still notice that the executable file has changed,
    # and still re-set the breakpoint appropriately.
#    gdb_rename_execfile ${binfile} ${binfile1}
#    gdb_rename_execfile ${binfile2} ${binfile}
    gdb_test "shell cp -f ${binfile2} ${binfile}" "$gdb_prompt"
    send "c\n"
    expect {
	-re ".*Breakpoint.* foo .* at .*:9.*$gdb_prompt" {
	    pass "second pass: run to foo() second time ";
	}
	timeout { 
	    fail "second pass: run to foo() second time (timeout)" ; 
#	    gdb_suppress_tests 
	}
    }
#}

# End of tests.

#gdb_stop_suppressing_tests
gdb_exit

exit $GRET

interact
