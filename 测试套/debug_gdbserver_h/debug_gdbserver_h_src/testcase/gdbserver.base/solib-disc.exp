#!/usr/bin/expect -f
# Copyright 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# Test connecting and disconnecting at shared library events.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile solib-disc
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

#if {[skip_shlib_tests]} {
#    return 0
#}

#set gdbserver_reconnect_p 1
#if { [info proc gdb_reconnect] == "" } {
#    exit 1
#}

set libfile so-disc-shr
set srcfile ${testfile}.c
#set binfile ${objdir}/${subdir}/${testfile}

#set libsrc "${srcdir}/${subdir}/${libfile}.c"
#set libname "${libfile}.so"
#set libobj "${objdir}/${subdir}/${libname}"
#set execsrc "${srcdir}/${subdir}/${srcfile}"
#set lib_dlopen [shlib_target_file ${libname}]
#set lib_syms [shlib_symbol_file ${libname}]

#remote_exec build "rm -f ${binfile}"

#if [get_compiler_info] {
#    return -1
#}

#set exec_opts [list debug shlib_load additional_flags=-DSHLIB_NAME\=\"${lib_dlopen}\"]

#if { [gdb_compile_shlib $libsrc $libobj {debug}] != ""
#     || [gdb_compile $execsrc ${binfile} executable $exec_opts] != "" } {
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}
#gdb_load_shlibs $libobj

#if ![runto_main] then {
#    fail "Can't run to main"
#    return 0
#}
gdb_test "b main" ""
#gdb_test "c" ""

gdb_test_no_output "set stop-on-solib-events 1"

gdb_test "continue" "Stopped due to shared library event.*" "continue to load"

set msg "save \$pc after load"
set saved_pc ""
send "print/x \$pc\n"
expect {
    -re "\\\$$decimal = (\[^\r\n\]*).*$gdb_prompt" {
	set saved_pc $expect_out(1,string)
	pass $msg
    }
}

gdb_test "disconnect" "Ending remote debugging\\." "disconnect after load"
#if { [gdb_reconnect] == 0 } {
#    pass "reconnect after load"
#} else {
#    fail "reconnect after load"
#    return 0
#}

gdb_test "print/x \$pc" "No registers.*$gdb_prompt"
gdb_exit
exit $GRET

interact
gdb_test "print/x \$pc" "\\\$$decimal = $saved_pc" "check \$pc after load"


gdb_test "continue" "Stopped due to shared library event.*" "continue to unload"

set msg "save \$pc after unload"
set saved_pc ""
send "print/x \$pc\n"
expect {
    -re "\\\$$decimal = (\[^\r\n\]*).*$gdb_prompt" {
	set saved_pc $expect_out(1,string)
	pass $msg
    }
}

gdb_test "disconnect" "Ending remote debugging\\." "disconnect after unload"
#if { [gdb_reconnect] == 0 } {
#    pass "reconnect after unload"
#} else {
#    fail "reconnect after unload"
#    return 0
#}

gdb_test "print/x \$pc" "\\\$$decimal = $saved_pc" "check \$pc after unload"

gdb_exit
exit $GRET

interact
