#!/usr/bin/expect -f
# Copyright 2004, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Author: Paul N. Hilfinger (Hilfinger@gnat.com)

# Test that GDB cleans up properly after errors that result when a 
# breakpoint is reset. 

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "chng-syms1"
set srcfile chng-syms.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"


#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-DVARIABLE=var1}] != "" } {
#    untested chng-syms.exp
#    return -1
#}

set oldtimeout $timeout
set timeout 10
#verbose "Timeout is now 10 seconds" 2

proc expect_to_stop_here { ident } {
    global gdb_prompt
    global decimal

    # the "at foo.c:36" output we get with -g.
    # the "in func" output we get without -g.
    expect {
	-re "Breakpoint .* stop_here .*$gdb_prompt" { 
	    return 1
	}
	timeout { 
	    fail "running to stop_here $ident (timeout)"
	    return 0
	}
    }
    return 1
}


gdb_test "break stop_here if (var1 == 42)" \
    "Breakpoint.*at.* file .*$srcfile, line.*" \
    "setting conditional breakpoint on function"
gdb_test "b main" ""
gdb_test "c" ""

send "c\n"
expect_to_stop_here "first time"
    
gdb_continue_to_end "breakpoint first time through"

# Now we recompile the executable, but without a variable named "var1", first
# waiting to insure that even on fast machines, the file modification times
# are distinct. This will force GDB to reload the file on the 
# next "run" command, causing an error when GDB tries to tries to reset 
# the breakpoint.

exit $GRET

interact

