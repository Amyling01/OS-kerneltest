#!/usr/bin/expect -f
# Test `info auxv' and related functionality.

# Copyright (C) 1992-2000, 2004, 2007-2010, 2012 Free Software
# Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is based on corefile.exp which was written by Fred
# Fish. (fnf@cygnus.com)

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "auxv"
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

#if { ! [istarget "*-*-linux*"] && ! [istarget "*-*-solaris*"] } {
#    verbose "Skipping auxv.exp because of lack of support."
#    return
#}


set binfile ${testfile}
set corefile ${testfile}.corefile
set gcorefile ${testfile}.gcore

#if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable \
#		  {debug additional_flags=-DUSE_RLIMIT}] != ""
#     && [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable \
#		  {debug}] != "" } {
#    untested "couldn't compile ${srcdir}/${subdir}/${srcfile}"
#    return -1
#}

# Use a fresh directory to confine the native core dumps.
# Make it the working directory for gdb and its child.
set coredir "coredir.[getpid]"
file mkdir $coredir
#set core_works [expr [isnative] && ! [is_remote target]]
set core_works 1
# Run GDB on the test program up to where it will dump core.

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}

gdb_test_no_output "set print sevenbit-strings"
gdb_test_no_output "set width 0"

if {$core_works} {
    if {[gdb_test "cd $coredir" ".*Working directory .*" \
	     "cd to temporary directory for core dumps"]} {
	set core_works 0
    }
}

#if { ![runto_main] } then {
#    gdb_suppress_tests;
#}

gdb_test "b main " "reakpoint 1 at .*: file auxv.c, line 90.*$gdb_prompt"
gdb_test "c " "reakpoint 1, main \\(\\) at auxv.c:90.*func1 \\(10\\);.*$gdb_prompt"
set print_core_line [gdb_get_line_number "ABORT;"]
gdb_test "tbreak $print_core_line"
gdb_test continue ".*ABORT;.*"

proc fetch_auxv {test} {
    global gdb_prompt

    set auxv_lines {}
    set bad -1
    # Former trailing `\[\r\n\]+' may eat just \r leaving \n in the buffer
    # corrupting the next matches.
    send "info auxv\n"
    expect {
	-re "info auxv\r\n" {
	    exp_continue
	}
	-ex "The program has no auxiliary information now" {
	    set bad 1
	    exp_continue
	}
	-ex "Auxiliary vector is empty" {
	    set bad 1
	    exp_continue
	}
	-ex "No auxiliary vector found" {
	    set bad 1
	    exp_continue
	}
	-re "^\[0-9\]+\[ \t\]+(AT_\[^ \t\]+)\[^\r\n\]+\r\n" {
	    lappend auxv_lines $expect_out(0,string)
	    exp_continue
	}
	-re "^\[0-9\]+\[ \t\]+\\?\\?\\?\[^\r\n\]+\r\n" {
	    warning "Unrecognized tag value: $expect_out(0,string)"
	    set bad 1
	    lappend auxv_lines $expect_out(0,string)
	    exp_continue
	}
	-re "$gdb_prompt" {
	    incr bad
	}
	-re "^\[^\r\n\]+\r\n" {
	    if {!$bad} {
		warning "Unrecognized output: $expect_out(0,string)"
		set bad 1
	    }
	    exp_continue
	}
    }

    if {$bad} {
	fail $test
	return {}
    }

    pass $test
    return $auxv_lines
}

set live_data [fetch_auxv "info auxv on live process"]

# Now try gcore.
set gcore_works 0
set escapedfilename $gcorefile
send "gcore $gcorefile\n"
expect {
    -re "Saved corefile ${escapedfilename}.*$gdb_prompt" {
	pass "gcore"
	set gcore_works 1
    }
    timeout {
        fail "timeout gcore $gcorefile"
    }
}

# Let the program continue and die.
gdb_test continue ".*Program received signal.*"
gdb_test continue ".*Program terminated with signal.*"

# Now collect the core dump it left.
set test "generate native core dump"
if {$core_works} {
    # Find the
    set names [glob -nocomplain -directory $coredir *core*]
    if {[llength $names] == 1} {
	set file [file join $coredir [lindex $names 0]]
#	gdb_test "shell mv $file $corefile" "$gdb_prompt"
	pass $test
    } else {
	set core_works 0
#	warning "can't generate a core file - core tests suppressed - check ulimit -c"
#	unsupported $test
    }
} else {
#    unsupported $test
}
#remote_exec build "rm -rf $coredir"
#gdb_test "shell rm -rf $coredir" "$gdb_prompt"
# Now we can examine the core files and check that their data matches what
# we saw in the process.  Note that the exact data can vary between runs,
# so it's important that the native core dump file and the gcore-created dump
# both be from the same run of the program as we examined live.

proc do_core_test {works corefile test1 test2} {
#    if {! $works} {
#	unsupported $test1
#	unsupported $test2
#    } else {
	gdb_test "core $corefile" "Core was generated by.*" \
	    "load core file for $test1" \
	    "A program is being debugged already.*" "y"
	set core_data [fetch_auxv $test1]
	global live_data
	if {$core_data == $live_data} {
	    pass $test2
	} else {
	    fail $test2
	}
#    }
}

#do_core_test $core_works $corefile \
#    "info auxv on native core dump" "matching auxv data from live and core"

do_core_test $gcore_works $gcorefile \
    "info auxv on gcore-created dump" "matching auxv data from live and gcore"
exit $GRET

interact
