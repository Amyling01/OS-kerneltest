#!/usr/bin/expect -f
# Copyright 2003, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@gnu.org

# This file is part of the gdb testsuite.

#
# Test floating-point related functionality.
#


source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }


global ARCH_FLAG
set ARCH_FLAG ""

send "uname -m\|awk \'{print substr\(\$0,1,3\)}\' \n"
expect {
    -timeout 5
    -re "arm.*$target_prompt" {
        set ARCH_FLAG "arm"
    }
    -re "x86.*$target_prompt" {
        set ARCH_FLAG "x86"
    }
    -re "ppc.*$target_prompt" {
        set ARCH_FLAG "ppc"
    }
    -re "mip.*$target_prompt" {
        set ARCH_FLAG "mips"
    }
    timeout {
        set ARCH_FLAG "unknown"
    }
}

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile "float"
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"
gdb_test_no_output "set height 500"

#if { [prepare_for_testing float.exp float float.c] } {
#    return -1
#}

# Set it up at a breakpoint so we have its registers.

gdb_test "b main " ""
gdb_test "c"  ""
#if ![runto_main] then {
#    perror "couldn't run to breakpoint"
#    continue
#}

# Test "info float".

if { $ARCH_FLAG=="arm" } {
    send "info float\n"
    expect {
	-re "Software FPU type.*mask:.*flags:.*$gdb_prompt" {
	    pass "info float (FPA)"
	}
	-re "fpscr.*s0.*s1.*s31.*$gdb_prompt" {
	    # Only check for single precision; d0 might be a vector register
	    # if we have NEON.
	    pass "info float (VFP)"
	}
        -re "No floating.point info available for this processor.*" {
            pass "info float (without FPU)"
	}
    }
} elseif { $ARCH_FLAG=="x86" } {
    gdb_test "info float" "R7:.*Status Word:.*Opcode:.*" "info float"
} elseif { $ARCH_FLAG=="mips" } {
    gdb_test "info float" "f0:.*flt:.*dbl:.*" "info float"
} elseif { $ARCH_FLAG=="ppc" } {
    send "info float\n"
    expect {
        -re "f0.*f1.*f31.*fpscr.*$gdb_prompt" {
            pass "info float (with FPU)"
	}
        -re "No floating.point info available for this processor.*" {
            pass "info float (without FPU)"
	}
    }
} else {
    gdb_test "info float" "No floating.point info available for this processor." "info float (unknown target)"
}

gdb_test "step"
gdb_test "finish" "Value returned is .* = (inf|nan).*"

gdb_exit
exit $GRET

interact
