#!/usr/bin/expect -f
#   Copyright 1998-1999, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */


source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

#set testfile "advance"
set testfile "jump"
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

#clear_xfail "*-*-*"

#set srcfile ${testfile}.c
#set binfile ${objdir}/${subdir}/${testfile}

# Build the test case
#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug nowarnings}] != "" } {
#     untested jump.exp
#     return -1
#    }


# Start with a fresh gdb

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}

#if ![runto_main] then {
#  perror "Couldn't run to main"
#  return -1
#}

gdb_test "b main" ""
gdb_test "c" ""
# Set a breakpoint on the statement that we're about to jump to.
# The statement doesn't contain a function call.
#
set bp_on_non_call 0
send "break 22\n"
expect {
    -re "\[Bb\]reakpoint (\[0-9\]*) at 0x\[0-9a-fA-F\]*: file .*${srcfile}, line 22.*$gdb_prompt" {
	set bp_on_non_call $expect_out(1,string)
	pass "break before jump to non-call"
    }
}

# Can we jump to the statement?  Do we stop there?
#
gdb_test "jump 22" "Breakpoint \[0-9\]*, .*${srcfile}:22.*" \
    "jump to non-call"

# Set a breakpoint on the statement that we're about to jump to.
# The statement does contain a function call.
#
set bp_on_call 0
send "break 21\n"
expect {
    -re "\[Bb\]reakpoint (\[0-9\]*) at 0x\[0-9a-fA-F\]*: file .*${srcfile}, line 21.*$gdb_prompt" {
	set bp_on_call $expect_out(1,string)
	pass "break before jump to call"
    }
}

# Can we jump to the statement?  Do we stop there?
#
gdb_test "jump 21" \
    "Breakpoint \[0-9\]*, .*${srcfile}:21.*" \
    "jump to call"

# If we disable the breakpoint at the function call, and then
# if we jump to that statement, do we not stop there, but at
# the following breakpoint?
#
gdb_test_no_output "disable $bp_on_call" "disable breakpoint on call"

gdb_test "jump 21" "Breakpoint \[0-9\]*, .*${srcfile}:22.*" \
    "jump to call with disabled breakpoint"

# Verify that GDB responds gracefully to the "jump" command without
# an argument.
#
gdb_test "jump" "Argument required .starting address.*" \
    "jump without argument disallowed"


# Verify that GDB responds gracefully to the "jump" command with
# trailing junk.
#
if { $ARCH == "powerpc" } {
 gdb_test "jump 21 100" \
    "Junk at end of line specification: 100"
} else {
gdb_test "jump 21 100" \
    "malformed linespec error: unexpected number, \"100\"" \
    "jump with trailing argument junk" \
}

# Verify that GDB responds gracefully to a request to jump out of
# the current function.  (Note that this will very likely cause the
# inferior to die.  Be prepared to rerun the inferior, if further
# testing is desired.)
#
# Try it both ways: confirming and not confirming the jump.
#

gdb_test "jump 12" "ine 12 is not in `main'.  Jump anyway.*y or n." 
gdb_test   "n" "$gdb_prompt"

gdb_test "jump 12" "ine 12 is not in `main'.  Jump anyway.*y or n." 
gdb_test   "y" "$gdb_prompt"

gdb_exit
exit $GRET

interact
