#!/usr/bin/expect -f
# Copyright 2006-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# The intent of this testcase is to verify that various aliases and
# shortcuts of the "delete" command never stop working.


source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global test_username test_password  target_passwd
global GDBSERVER_TOOL_DIR HOST_GDB_TOOL host_ip host_prompt host_passwd FLAG HOST_SDK_LIB_DIR 

spawn su $test_username
expect {
    -timeout 2
    -re "Password:" {
        send "$test_password\n"
        gdb_test "whoami" "$test_username"
    }
    timeout {
        gdb_test "whoami" "$test_username"
        if { $GRET != 0 } {
        send_user "timeout su"
        }
    }
}

if { $GRET != 0 } {
    send_user "su $test_username fail "
    exit $GRET
}

ssh_on_to_target
sleep 3 

 if { $GRET } {
    send_user "ssh on to $target_ip fail"
    exit $GRET
 }

set target_prompt "/tmp/for_gdbserver_test/gdbserver.base"
gdb_test "cd $target_prompt" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"

set testfile del
set srcfile ${testfile}.c
gdb_test "'$GDBSERVER_TOOL_DIR'gdbserver $host_ip:1111 $testfile &" "$gdb_prompt"
gdb_test "exit"  "$host_prompt"
sleep 3

#gdb_test "export LD_LIBRARY_PATH=$HOST_SDK_LIB_DIR:."  "$host_prompt"
gdb_test "$HOST_GDB_TOOL $testfile" "$gdb_prompt"
gdb_test "target remote $target_ip:1111" "Remote debugging using $target_ip:1111.*$gdb_prompt"

gdb_test "set solib-search-path $HOST_SDK_LIB_DIR:." "$gdb_prompt"

#set binfile ${objdir}/${subdir}/${testfile}
#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#    untested "Couldn't compile test program"
#    return -1
#}

# Get things started.


# A function to test that ALIAS is working as a shortcut of the "delete"
# command.

proc test_delete_alias { alias } {
    global srcfile

    # First of all, remove all previous breakpoints if there were any,
    # and then verify that we do not have any breakpoint lying around.
    gdb_test_no_output "delete" \
             "Remove all breakpoints ($alias)"

    gdb_test "info break" \
             "No breakpoints or watchpoints." \
             "info break after removing break on main"

    
    # Now, insert a breakpoint at an easy location, and then remove it
    # using $alias. We verified that the removal worked by checking
    # the list of breakpoints.
    gdb_test "break main" \
             "Breakpoint.*at.* file .*$srcfile, line.*" \
             "breakpoint insertion ($alias)"
    
    gdb_test_no_output "$alias \$bpnum" \
             "Remove last breakpoint ($alias)"
    
    gdb_test "info break" \
             "No breakpoints or watchpoints." \
             "info break after removing break on main ($alias)"
}

# Test various shortcut forms of the "delete" command.

test_delete_alias "del"
test_delete_alias "d"

gdb_exit
exit $GRET

interact
