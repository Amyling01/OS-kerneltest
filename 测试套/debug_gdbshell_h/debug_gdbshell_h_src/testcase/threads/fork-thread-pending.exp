#!/usr/bin/expect -f 
# Copyright (C) 2009-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# There's no support for `set follow-fork-mode' in the remote
# protocol.
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}


gdb_test "cd /tmp/for_gdbshell_test/threads" "$target_prompt*"

set testfile fork-thread-pending
set srcfile ${testfile}.c
set binfile ${testfile}

#if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir

#gdb_load ${binfile}
gdb_test "'$GDB_TOOL_DIR'gdbshell $binfile" "$GDBPROMPT"
if ![runto_main] then {
   send_user "Can't run to main"
   exit -1
}

gdb_test_no_output "set follow-fork-mode child" "1, set follow-fork-mode child"
gdb_test "catch fork" "Catchpoint \[0-9\]* \\(fork\\)" "1, insert fork catchpoint"
gdb_breakpoint "start" "" "1, set breakpoint at start"

gdb_test "continue" "Catchpoint.*" "1, get to the fork event"

gdb_test "info threads" " Thread .* Thread .* Thread .* Thread .*" "1, multiple threads found"

gdb_test "thread 2" ".*" "1, switched away from event thread"

gdb_test "continue" "Not resuming.*" "1, refused to resume"

#  Id   Target Id         Frame 
#  * 12   Thread 0x7ffff2e3a700 (LWP 7898) "fork-thread-pen" 0x00007ffff76e9cff in fork () from /lib64/libc.so.6
#    fail 1, followed to the child, found one thread *****************
set test "1, followed to the child, found one thread"
send "info threads\n" 
expect {
    -re "Id.*Thread.*Thread.*$GDBPROMPT" {
	send_user "fail $test *****************"
    set GRET [expr $GRET + 1]
    }
    -re "Id.*Thread.*$GDBPROMPT" {
	send_user "pass $test"
    }
    timeout {
	send_user "$test (timeout) *****************"
    set GRET [expr $GRET + 1]
    }
}

gdb_test "continue" "Breakpoint 3, start.*" "1, get to the spawned thread in fork child"

set test "1, followed to the child, found two threads"
send "info threads\n" 
expect {
    -re "Thread .* Thread .* Thread .*$GDBPROMPT" {
	send_user "fail $test *******************"
    set GRET [expr $GRET + 1]
    }
    -re "Thread .* Thread .*$GDBPROMPT" {
#	pass "$test"
    }
    timeout {
	send_user "$test (timeout) ******************"
    set GRET [expr $GRET + 1]
    }
}

# Start over, but this time, don't switch away from the fork event thread.

gdb_exit
#          gdb_start
#gdb_reinitialize_dir $srcdir/$subdir

gdb_test "'$GDB_TOOL_DIR'gdbshell $binfile" "$GDBPROMPT"
#gdb_load ${binfile}
if ![runto_main] then {
   send_user "Can't run to main"
   exit -2
}

gdb_test_no_output "set follow-fork-mode child" "2, set follow-fork-mode child"
gdb_test "catch fork" "Catchpoint \[0-9\]* \\(fork\\)" "2, insert fork catchpoint"
gdb_breakpoint "start"

gdb_test "continue" "Catchpoint.*" "2, get to the fork event"

gdb_test "info threads" " Thread .* Thread .* Thread .* Thread .*" "2, multiple threads found"

gdb_test "continue" "Breakpoint 3, start.*" "2, get to the spawned thread in fork child"

set test "2, followed to the child, found two threads"
send "info threads\n"
expect {
    -re " Thread .* Thread .* Thread .*$GDBPROMPT" {
	send_user "fail $test ******************"
    set GRET [expr $GRET + 1]
    }
    -re " Thread .* Thread .*$GDBPROMPT" {
#	pass "$test"
    }
    timeout {
	send_user "$test (timeout) ******************"
    set GRET [expr $GRET + 1]
    }
}
gdb_test "info threads" "$gdb_prompt"
gdb_test "info threads" "$gdb_prompt"
exit $GRET

interact
