#!/usr/bin/expect -f 
# static.exp -- test script, for GDB, the GNU debugger.

# Copyright 2004-2005, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Based on manythreads written by Jeff Johnston, contributed by Red
# Hat.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global GDBPROMPT
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

gdb_test "cd /tmp/for_gdbshell_test/threads" "$target_prompt*"

set testfile "staticthreads"
set srcfile ${testfile}.c
set binfile ${testfile}
set static_flag "-static"

#if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" \
#	 executable \
#	 [list debug "incdir=${objdir}" "additional_flags=${static_flag}" \
#	     ]] != "" } {
#    return -1
#}

#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}

gdb_test "'$GDB_TOOL_DIR'gdbshell $binfile" "$GDBPROMPT"

gdb_test_no_output "set print sevenbit-strings"


# See if the static multi-threaded program runs.

runto_main
gdb_test "break sem_post"
set test "Continue to main's call of sem_post"
send "continue\n" 
expect {
    -re "Breakpoint .*, .*sem_post .*$GDBPROMPT " {
#	pass "$test"
    }
    -re "Program received signal .*$GDBPROMPT " {
	send_user "kfail gdb/1328 $test"
    set GRET [expr $GRET + 1]
    }
}
    

# See if handle SIG32 helps (a little) with a static multi-threaded
# program.

set sig "SIG32"

# SIGRTMIN is 37 on hppa-linux and hpux
#if [istarget hppa*-*-*] {
#  set sig "SIG37"
#}

#rerun_to_main
gdb_test "run" "y or n"
gdb_test "y" "$GDBPROMPT"

gdb_test "handle $sig nostop noprint pass"
set test "Handle $sig helps"
gdb_test "continue" " .*sem_post .*" "handle $sig helps"


# See if info threads produces anything approaching a thread list.

set test "info threads"
send "info threads\n"
expect {
    -re " Thread .*$GDBPROMPT " {
#	pass "$test"
    }
    -re "$GDBPROMPT " {
	send_user "kfail gdb/1328 $test"
    set GRET [expr $GRET + 1]
    }
}


# Check that the program can be quit.

set test "GDB exits with static thread program"
send "quit\n" 
expect {
    -re "Quit anyway\\? \\(y or n\\) $" {
	send_gdb "y\n"
	exp_continue
    }
    eof {
#        pass "$test"
    }
}
exit $GRET

interact
