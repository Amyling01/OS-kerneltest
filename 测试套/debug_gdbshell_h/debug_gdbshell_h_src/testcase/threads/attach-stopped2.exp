#!/usr/bin/expect -f 
# Copyright 2008-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test was created by modifying attach.exp.
# This file was created by Jeff Johnston <jjohnstn@redhat.com>.
# This file was updated by Jan Kratochvil <jan.kratochvil@redhat.com>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

gdb_test "cd /tmp/for_gdbshell_test/threads" "$target_prompt*"
# This test only works on Linux
#if { ![isnative] || [is_remote host] || [target_info exists use_gdb_stub]
#     || ![istarget *-linux*] } {
#    continue
#}

set testfile "attach-stopped"
set testfile2 "attach-stopped2"
set srcfile  ${testfile}.c
set binfile  ${testfile2}
set escapedbinfile  [string_to_regexp ${testfile2}]

#execute_anywhere "rm -f ${binfile}"
#remote_exec build "rm -f ${binfile}"
# For debugging this test
#
#log_user 1

proc corefunc { threadtype } {
    global srcfile
    global binfile
    global escapedbinfile
    global srcdir
    global subdir
    global gdb_prompt
    global target_prompt
    global GRET GDB_TOOL_DIR

#    if [get_compiler_info ${binfile}] {
#	return -1
#    }

    # Start the program running and then wait for a bit, to be sure
    # that it can be attached to.

#    set testpid [eval exec ./$binfile &]
    
    set testpid 0
    send "./$binfile & \n"
    expect {
        -timeout 2
        -re "\\\[1\\\] (\[0-9\]+).*/tmp/for_gdbshell_test/threads" {
        set testpid $expect_out(1,string)
        }
        timeout {
        }
    }
    if { $testpid == 0 } {
        send "ps -ef | grep $binfile |grep -v \"grep $binfile\" \n"
        expect {
            -timeout 2
            -re " (\[0-9\]+).*/tmp/for_gdbshell_test/threads" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
    }
    # Avoid some race:
    sleep 2

    send_user "testpid = $testpid \n"

    # Stop the program 
#    remote_exec build "kill -s STOP ${testpid}"

    # Start with clean gdb
#    gdb_exit
#    gdb_start
#    gdb_reinitialize_dir $srcdir/$subdir
#    gdb_load ${binfile}
    gdb_test "'$GDB_TOOL_DIR'gdb" "$gdb_prompt"

    # Verify that we can attach to the stopped process.
       
    set test "$threadtype: attach2 to stopped, after setting file"
    gdb_test "attach $testpid" "Attaching to process $testpid.*attach-stopped2...done.*$gdb_prompt"
#    gdb_test_multiple "attach $testpid" "$test" {
#	-re "Attaching to program.*`?$escapedbinfile'?, process $testpid.*$gdb_prompt $" {
#	    pass "$test"
#	}
#    }

    # ".*sleep.*clone.*" would fail on s390x as bt stops at START_THREAD there.
    if {[string equal $threadtype threaded]} {
	gdb_test "thread apply all bt" ".*sleep.*start_thread.*" "$threadtype: attach2 to stopped bt"
    } else {
	gdb_test "bt" ".*sleep.*main.*" "$threadtype: attach2 to stopped bt"
    }
    # This breakpoint is there for old/non-x86 kernels not restarting syscalls.
    gdb_breakpoint $srcfile:[gdb_get_line_number "Second sleep"]
    set test "$threadtype: attach2 continue"
    send "continue\n"
    expect {
	-re "Continuing" {
	    send_user "pass continue ($test)"
	}
    }

    # For this to work we must be sure to consume the "Continuing."
    # message first, or GDB's signal handler may not be in place.
    after 1000 {send "\003"}
    set test "$threadtype: attach2 stop interrupt"
    expect {
      -re "Program received signal SIGINT.*$gdb_prompt"
	{
#	  pass $test
	}
      -re "Breakpoint \[0-9\].*$srcfile.*$gdb_prompt"
	{
#	  pass $test
	}
      timeout
	{
	  send_user "fail $test"
      set GRET [expr $GRET + 1]
	}
    }

    gdb_exit

    # Avoid some race:
    sleep 2

    # At this point, the process should be sleeping

#    if [catch {open /proc/$testpid/status r} fileid2] {
#	set line2 "NOTFOUND"
#    } else {
#	gets $fileid2 line1;
#	gets $fileid2 line2;
#	close $fileid2;
#    }
    
    send "cat /proc/$testpid/status | sed -n 2p \n"
    expect {
        -timeout 2
        -re "\\(sleeping\\).*/tmp/for_gdbshell_test/threads" {
        send_user "pass "
        }
        timeout {
        send_user "fail get /proc/$testpid/status"
        set GRET [expr $GRET + 1]
        }
    }

#    send_user "line2= $line2 \n"
#    set test "$threadtype: attach2, exit leaves process sleeping"
#    if {[string match "*(sleeping)*" $line2]} {
#      pass $test
#    } else {
#        send_user " fail $test"
#         set GRET [expr $GRET + 1]
#    }

    # Make sure we don't leave a process around to confuse
    # the next test run (and prevent the compile by keeping
    # the text file busy), in case the "set should_exit" didn't
    # work.
       
#    remote_exec build "kill -9 ${testpid}"
    gdb_test "kill -9 $testpid" "/tmp/for_gdbshell_test/threads"
    gdb_test "pwd" "/tmp/for_gdbshell_test/threads"
}

# build the test case first without threads
#
#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#    untested "attach-stopped.exp (unthreaded)"
#    return -1
#}

#corefunc nonthreaded

# build the test case first without threads
#
#if  { [gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-DUSE_THREADS}] != "" } {
#    untested "attach-stopped.exp (threaded)"
#    return -1
#}

corefunc threaded

exit $GRET

interact
