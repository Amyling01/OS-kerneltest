#!/usr/bin/expect -f 
# manythreads.exp -- Expect script to test stopping many threads
# Copyright (C) 2004, 2006-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Jeff Johnston. (jjohnstn@redhat.com)

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

gdb_test "cd /tmp/for_gdbshell_test/threads" "$target_prompt*"


set testfile "manythreads"
set srcfile ${testfile}.c
set binfile ${testfile}

#if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable [list debug "incdir=${objdir}"]] != "" } {
#    return -1
#}

#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}
gdb_test "'$GDB_TOOL_DIR'gdbshell $binfile" "$GDBPROMPT"
gdb_test_no_output "set print sevenbit-strings"
runto_main

# We'll need this when we send_gdb a ^C to GDB.  Need to do it before we
# run the program and gdb starts saving and restoring tty states.
# On Ultrix, we don't need it and it is really slow (because shell_escape
# doesn't use vfork).
#if ![istarget "*-*-ultrix*"] then {
#    gdb_test "shell stty intr '^C'" ".*"
#}

set message "first continue"
send "continue\n"
expect {
  -re "error:.*$GDBPROMPT" {
  send_user "fail $message"
  set GRET [expr $GRET + 1]
  }
  -re "Continuing" {
#    pass "$message"
  }
}

# Wait one second.  This is better than the TCL "after" command, because
# we don't lose GDB's output while we do it.
#remote_expect host 1 { timeout { } }

# Send a Ctrl-C and verify that we can do info threads and continue
send_gdb "\003"
set message "stop threads 1"
expect {
  -re "\\\[New \[^\]\]*\\\]\r\n" {
    exp_continue
  }
  -re "\\\[\[^\]\]* exited\\\]\r\n" {
    exp_continue
  }
  -re "Thread \[^\n\]* executing\r\n" {
    exp_continue
  }
  -re "Program received signal SIGINT.*$GDBPROMPT" {
#    pass "$message"
  }
  timeout {
    send_user "$message (timeout)"
    set GRET [expr $GRET + 1]
  }
}

set cmd "info threads"
set ok 0
send "$cmd\n"
expect {
    -re " 1 *Thread " {
	set ok 1
	exp_continue
    }
    -re ".*\r\n" {
	# Eat this line and continue, to prevent the buffer overflowing.
	exp_continue
    }
    -re "$GDBPROMPT" {
	if { $ok } {
#	    pass $cmd
	} else {
	    send_user "fail $cmd"
        set GRET [expr $GRET + 1]
	}
    }
}

gdb_test_no_output "thread name zardoz" "give a name to the thread"
gdb_test "info threads" ".*zardoz.*" "check thread name"

set message "second continue"
send "continue\n"
expect {
  -re "error:.*$GDBPROMPT" {
    send_user "fail $message"
    set GRET [expr $GRET + 1]
  }
  -re "Continuing" {
#    pass "$message"
  }
}

# Wait another second.  If the program stops on its own, GDB has failed
# to handle duplicate SIGINTs sent to multiple threads.

#set failed 0
#remote_expect host 1 {
#  -re "\\\[New \[^\]\]*\\\]\r\n" {
#    exp_continue -continue_timer
#  }
#  -re "\\\[\[^\]\]* exited\\\]\r\n" {
#    exp_continue -continue_timer
#  }
#  -re "Thread \[^\n\]* executing\r\n" {
#    exp_continue -continue_timer
#  }
#  -re "Program received signal SIGINT.*$gdb_prompt $" {
#    if { $failed == 0 } {
#      fail "check for duplicate SIGINT"
 #   }
 #   send_gdb "continue\n"
 #   set failed 1
 #   exp_continue
 # }
 # timeout {
 #   if { $failed == 0 } {
#      pass "check for duplicate SIGINT"
 #   }
 # }
#}

# Send another Ctrl-C and verify that we can do info threads and quit
send_gdb "\003"
set message "stop threads 2"
expect {
  -re "\\\[New \[^\]\]*\\\]\r\n" {
    exp_continue
  }
  -re "\\\[\[^\]\]* exited\\\]\r\n" {
    exp_continue
  }
  -re "Thread \[^\n\]* executing\r\n" {
    exp_continue
  }
  -re "Program received signal SIGINT.*$GDBPROMPT" {
#    pass "$message"
  }
  timeout {
    send_user "$message (timeout)"
    set GRET [expr $GRET + 1]
  }
} 

send "quit\n" 
expect {
    -re "Quit anyway\\? \\(y or n\\) $" {
	send "y\n"
	exp_continue
    }
    -re "$target_prompt" {
#        pass "GDB exits after stopping multithreaded program"
    }
    timeout {
        send_user "GDB exits after stopping multithreaded program (timeout)"
        set GRET [expr $GRET + 1]
    }
}

exit $GRET

interact
