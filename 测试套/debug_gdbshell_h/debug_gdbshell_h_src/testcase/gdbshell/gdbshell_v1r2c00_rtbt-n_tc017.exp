#!/usr/bin/expect -f 
#######################################################################
##- @Copyright (C), 1988-2013, Huawei Tech. Co., Ltd.
##- @Suitename: debug_gdbshell_h
##- @Name: gdbshell_v1r2c00_rtbt-n_tc017
##- @Author: l00191161
##- @Date: 2013-10-17
##- @Precon: 支持gdbshell
##- @Brief: rtbt兼容bt功能
##- @Detail: 1，创建一个进程，该进程起10个线程，某个线程中调用函数层数为10。
#            2，gdbshell rtat该进程，info thread应该多出一个线程信息
#            3，rtint 非gdbshell线程infier id后，该线程进入T状态。
#            4，分别验证rtbt 1、rtbt 5、rtbt 10是否正确，同时间隔验证rtir 寄存器信息是否正确
#            5，退出
##- @Expect: rtat仅一次多出一个工作线程，原进程状态不变。 rtint后进程状态为T，rtbt获取调用栈信息、rtir获取寄存器信息正确，过程进程、线程状态不变。程序退出无异常
##- @Level: Level 2
##- @Auto: True
##- @Modify:
#######################################################################*/
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

gdb_test "cd /tmp/for_gdbshell_test/gdbshell" "$target_prompt"
global testpid
global binfile
set binfile thread_test
set testpid 0
gdb_test "killall $binfile"
sleep 1
gdb_test "./$binfile &" "$target_prompt"
send "ps -ef | grep $binfile |grep -v \"grep $binfile\"|sed -n 1p |awk '\{print \$2\}'\n"
expect {
    -timeout 2
        -re "(\[0-9\]+)\r\n" {
            set testpid $expect_out(1,string)
        }
    timeout {
        send_user "fail \n"
        set GRET [expr $GRET + 1]
    }
}

send_user "testpid=$testpid \n"

if { $testpid == 0 } {
     set GRET [expr $GRET + 1]
     exit $GRET
}

set target_prompt "/tmp/for_gdbshell_test/gdbshell"
gdb_test "'$GDB_TOOL_DIR'gdbshell" "$gdb_prompt"

gdb_test "rtat $testpid" "gdbshellagent.*$gdb_prompt"

set THREAD_NUM 0
send "info threads\n"
expect {
    -timeout 5
    -re "thread_test" {
        incr THREAD_NUM
        exp_continue
    }
    -re "gdb_prompt" {
    }
}

send "info threads\n"
expect {
    -timeout 5
    -re "gdbshellagent" {
        incr THREAD_NUM
        exp_continue
    }
    -re "gdb_prompt" {
    }
}

if { $THREAD_NUM != 4 } {
    send_user "threads num is $THREAD_NUM mismatch 4 while info threads"
    set GRET [expr $GRET + 1] 
}

set bt1 0;
set bt2 0;
set bt3 0;
set bt4 0;
    
set TC17_FLAG 1
for { set i 1 } { $i < 5 } { incr i } {
    gdb_test "rtint $i" "Switching to thread $i"
    gdb_test "info threads" "\\* $i"
    sleep 1
# test rtbt
    send "rtbt\n"
    expect {
        -timeout 20
        -re "#0  $hex in pthread_join.*#1  $hex in main.*" {
            set bt1 1
        }
        -re "#0  ninth_floor_func .*#1  $hex in eighth_floor_func.*#2  $hex in seventh_floor_func.*#3  $hex in sixth_floor_func.*#4  $hex in fifthly_floor_func.*#5  $hex in fourthly_floor_func.*#6  $hex in third_floor_func.*#7  $hex in second_floor_func.*#8  $hex in first_floor_func.*#9  $hex in thread_f9.*#10 $hex in start_thread.*#11 $hex in clone.*#12 $hex in clone" {
            set bt2 1
        }
        -re "#0  thread_start.*#1  $hex in start_thread.*#2  $hex in clone.*#3  $hex in clone" {
            set bt3 1
        }
        -re "#0  $hex in gdbshell_hook_point.*#1  $hex in gdbshell_hook_thread.*#2  $hex in start_thread.*#3  $hex in clone.*#4  $hex in clone" {
            set bt4 1
        }
        timeout {
            send_user "rtbt timeout $i\n"
            set GRET [expr $GRET + 1]
        }
    }

    if { $bt2 == 1 && $TC17_FLAG == 1 } {
        set TC17_FLAG 0
        gdb_test "rtint $i" "Switching to thread $i"
        gdb_test "info threads" "\\* $i"
        sleep 1
        send "rtbt 1\n" 
        expect {
            -timeout 5
            -re "#1  $hex in eighth_floor_func" {
                send_user "why "
            }
            -re "#0  ninth_floor_func.*$gdb_prompt" {
            }

    }
    set thread_stauts 0
    send "info threads\n"
    expect {
        -timeout 20
        -re "\"thread_test\" \\(running\\)" {
            incr thread_stauts
            exp_continue
        }
        -re "gdbshellagent" {
            exp_continue
        }
        -re "$gdb_prompt" {
        }    
        timeout {
            send_user "timeout info threads $i\n"
            set GRET [expr $GRET + 1]
        }
    }
    
    if { $thread_stauts != 3 } {
        send_user "the threads is not running after rtbt\n"
        set GRET [expr $GRET + 1] 
    }

}
 

gdb_test "detach" "Detaching from program:.*process $testpid"

gdb_exit
gdb_test "killall thread_test" "$target_prompt"
sleep 1
exit $GRET

interact
