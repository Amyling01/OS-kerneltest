#!/usr/bin/expect -f 
#######################################################################
##- @Copyright (C), 1988-2013, Huawei Tech. Co., Ltd.
##- @Suitename: debug_gdbshell_h
##- @Name: gdbshell_v1r2c00_1S-0-10_tc011
##- @Author: l00191161
##- @Date: 2013-10-17
##- @Precon: 支持gdbshell
##- @Brief: S状态单进程调试
##- @Detail: 1，启动单进程，S状态。
#            2，gdbshell rtat该进程，info thread应该得到2个线程信息
#            3，rtint 非gdbshell线程infier id后，该线程进入T。
#            4，rtbt获取调用栈信息是否正确，rtbt后进程状态是否还原
#            5，rtint 非gdbshell线程infier id，rtir获取寄存器信息是否正确，rtir后进程状态是否还原
#            6，重复2-5 10次
#            7，退出
##- @Expect:  rtint后进程状态为T，rtbt获取调用栈信息、rtir获取寄存器信息正确，过程进程状态不变。程序退出无异常
##- @Level: Level 3
##- @Auto: True
##- @Modify:
#######################################################################*/
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

gdb_test "cd /tmp/for_gdbshell_test/gdbshell" "$target_prompt"
global testpid
global binfile
set binfile process_S
set testpid 0
gdb_test "./$binfile &" "$target_prompt"
sleep 5
send "ps -ef | grep $binfile |grep -v \"grep $binfile\"|sed -n 1p |awk '\{print \$2\}'\n"
expect {
    -timeout 2
        -re "(\[0-9\]+)\r\n" {
            set testpid $expect_out(1,string)
        }
    timeout {
        send_user "fail \n"
        set GRET [expr $GRET + 1]
    }
}

send_user "testpid=$testpid \n"

if { $testpid == 0 } {
     set GRET [expr $GRET + 1]
     exit $GRET
}

set target_prompt "/tmp/for_gdbshell_test/gdbshell"
set tid1 $testpid
set tid2 $testpid
send "ls /proc/$testpid/task/|sed -n 1p\n"
expect {
    -re "(\[0-9\]+)\r\n" {
        set tid1 $expect_out(1,string)        
    }
}

send "ls /proc/$testpid/task/|sed -n 2p\n"
expect {
    -re "(\[0-9\]+)\r\n" {
        set tid2 $expect_out(1,string)        
    }
}

if { $tid1 == $tid2 } {
    send_user "tid1 == tid2 \n"
    set GRET [expr $GRET + 1]
}

set tid1_state a
send "cat /proc/$testpid/task/$tid1/status|grep State|awk '\{print \$2\}'\n"
expect {
    -re "(\[A-Za-z\])+\r\n" {
        set tid1_state $expect_out(1,string)
    }
}

set tid2_state a
send "cat /proc/$testpid/task/$tid2/status|grep State|awk '\{print \$2\}'\n"
expect {
    -re "(\[A-Za-z\])+\r\n" {
        set tid2_state $expect_out(1,string)
    }
}
send_user "tid1_state=$tid1_state, tid2_state=$tid2_state\n"
if { $tid1_state != "S" } {
    send_user "\n*********the test process status is not S \n"
    set GRET [expr $GRET + 1]
}

gdb_test "'$GDB_TOOL_DIR'gdbshell" "$gdb_prompt"
gdb_test "rtat $testpid" "gdbshellagent.*$gdb_prompt"

gdb_test "show help" "help"
set THREAD_NUM 0
send "info threads\n"
expect {
    -timeout 5
    -re "$binfile" {
        incr THREAD_NUM
        exp_continue
    }
    -re "gdb_prompt" {
    }
}

gdb_test "show help" "help"
send "info threads\n"
expect {
    -timeout 5
    -re "gdbshellagent" {
        incr THREAD_NUM
        exp_continue
    }
    -re "gdb_prompt" {
    }
}

if { $THREAD_NUM != 2 } {
    send_user "threads num is $THREAD_NUM mismatch 2 while info threads"
    set GRET [expr $GRET + 1] 
}

set work_tid 0
send "info threads\n"
expect {
    -re "(\[0-9\]+)    Thread $hex \\(LWP (\[0-9\]+)\\) \"gdbshellagent\"" {
        set work_ID $expect_out(1,string)
        set work_tid $expect_out(2,string)
    }
}

if { $work_tid != $tid1 && $work_tid != $tid2 } {
    send_user "get work threads tid error \n"
    set GRET [expr $GRET + 1]
}

set bt1 0;
set bt2 0;

set ir1 0;
set ir2 0;
for { set i 1 } { $i < 3 } { incr i } {
    set tid_rtint 0
    send "rtint $i\n"
    expect {
        -timeout 5
        -re "Switching to thread $i \\(Thread $hex \\(LWP (\[0-9\]+)\\)\\)" {
            set tid_rtint $expect_out(1,string)    
        }
        timeout {
            send_user "\n*********rtint timeout $i \n"
            set GRET [expr $GRET + 1]
        }
    }

    send_user "\n rtint get thread id $tid_rtint\n"

    gdb_test "show non-stop" "Controlling the inferior in non-stop mode is on."
    set tid1_sf b
    send "shell cat /proc/$testpid/task/$tid1/status|grep State|awk '\{print \$2\}'\n"
    expect {
        -timeout 5
        -re "(\[A-Za-z\])+\r\n" {
                set tid1_sf $expect_out(1,string)
            }
        }

    send_user "$tid1_sf\n"
    if { $tid_rtint == $tid1 } {
        if { $tid1_sf != "t" } {
            send_user "\n************* why the rtint thread status is not t\n"
            set GRET [expr $GRET + 1]
        }
    } else {
        if { $tid1_sf != $tid1_state } {
            send_user "the job threads' status changed,while rtint the work thread \n"
            set GRET [expr $GRET + 1]
         } 
    }
    
    send "rtbt\n" 
    expect {
        -re "#0  main" {
            set bt1 1
        }
        -re "#0  $hex in gdbshell_hook_point.*#1  $hex in gdbshell_hook_thread.*#2  $hex in start_thread.*#3  $hex in clone.*#4  $hex in clone" {
            set bt2 1
        }
    }
    
    gdb_test "show non-stop" "Controlling the inferior in non-stop mode is on."
    set tid1_sf b
    send "shell cat /proc/$testpid/task/$tid1/status|grep State|awk '\{print \$2\}'\n"
    expect {
        -timeout 5
        -re "(\[A-Za-z\])+\r\n" {
                set tid1_sf $expect_out(1,string)
            }
        }

    send_user "$tid1_sf\n"
    if { $tid_rtint == $tid1 } {
        if { $tid1_sf != $tid1_state } {
            send_user "\n************* why the thread status is not restore after rtbt\n"
            set GRET [expr $GRET + 1]
        }
    }

    gdb_test "rtint $i" "Switching to thread $i"
    gdb_test "show non-stop" "Controlling the inferior in non-stop mode is on."
    set tid1_sf b
    send "shell cat /proc/$testpid/task/$tid1/status|grep State|awk '\{print \$2\}'\n"
    expect {
        -timeout 5
        -re "(\[A-Za-z\])+\r\n" {
                set tid1_sf $expect_out(1,string)
            }
        }

    send_user "$tid1_sf\n"
    if { $tid_rtint == $tid1 } {
        if { $tid1_sf != "t" } {
            send_user "\n************* why the rtint thread status is not t\n"
            set GRET [expr $GRET + 1]
        }
    } else {
        if { $tid1_sf != $tid1_state } {
            send_user "the job threads' status changed,while rtint the work thread \n"
            set GRET [expr $GRET + 1]
         } 
    }
    
    gdb_test "rtir" "$gdb_prompt" 
    
    gdb_test "show non-stop" "Controlling the inferior in non-stop mode is on."
    set tid1_sf b
    send "shell cat /proc/$testpid/task/$tid1/status|grep State|awk '\{print \$2\}'\n"
    expect {
        -timeout 5
        -re "(\[A-Za-z\])+\r\n" {
                set tid1_sf $expect_out(1,string)
            }
        }

    send_user "$tid1_sf\n"
    if { $tid_rtint == $tid1 } {
        if { $tid1_sf != $tid1_state } {
            send_user "\n************* why the thread status is not restore after rtir\n"
            set GRET [expr $GRET + 1]
        }
    }
}
 

gdb_test "detach" "Detaching from program:.*process $testpid"

gdb_exit
gdb_test "kill -9 $testpid" "$target_prompt"
sleep 1
exit $GRET

interact
