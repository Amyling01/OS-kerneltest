#!/bin/sh
TARGET_USER='root'
############################
# obsoleted result files&dirs
###########################
#don't add any words like FILENAME,LMBENCH_RESULT,PERFORMANCE_TESTSUITE_RESULT,AIM9_RESULT,CYCLIBTEST_RESULT from beginning to here
TESTSUITE_NAME="docker_cli_perf_h"
FILENAME=performance_result.xls
DOCKER_RESULT=../results/docker_result

# perfermance result dir
TS_DATA_DIR=${TS_DATA_DIR:-./}
PERF_RESULT_DIR=${TS_DATA_DIR}/perfdata/
USE_EXPECT=0
mkdir -p $PERF_RESULT_DIR

HOST_IP_t=${HOST_IP:-EMPTY_HOST_MODIYFY_ENABLE}
#HOST_IP_t=EMPTY_HOST_MODIYFY_ENABLE

CURRENT_DIR=`pwd`
CONF_DIRc=../../../conf
cd ${CONF_DIRc}

#only support 2 hops 
try_to_add_route()
{
	local netcard_num=0
	local netcard_count=0
	local ROUTE_IP=0
	local CONF_HOST_NET=0
	local CONF_TARGET_NETCARD_NAME=""
	netcard_num=`/sbin/ifconfig | grep -i "inet addr[[:blank:]]*:" | wc -l`
	netcard_count=1
	ROUTE_IP=`ssh ${TARGET_USER}@${TARGET_IP} 'echo $SSH_CONNECTION' | awk '{print $1}'`

	while [ $netcard_count -le $netcard_num ]
	do
		HOST_IP_t=`/sbin/ifconfig | grep -i "inet addr[[:blank:]]*:" | head -n $netcard_count | tail -n 1`
		HOST_IP_t=`echo $HOST_IP_t | awk -F "[[:blank:]]" '{print $2}'`
		HOST_IP_t=${HOST_IP_t##*:}
		CONF_HOST_NET=${HOST_IP_t%\.*}
		CONF_HOST_NET=${CONF_HOST_NET}.0
		if [ "$HOST_IP_t" = 127.0.0.1 ]
		then
			netcard_count=`expr $netcard_count '+' 1`
			continue
		fi
		#try to add route,get target netcard name first
		scp ./get_netcard_name.sh ${TARGET_USER}@${TARGET_IP}:/tmp
		if [ $? -ne 0 ]
		then
			echo "scp get_netcard_name.sh to ${TARGET_IP}:/tmp fail" 
			return 1
		fi
		CONF_TARGET_NETCARD_NAME=`ssh ${TARGET_USER}@${TARGET_IP} "/tmp/get_netcard_name.sh"`
		ssh ${TARGET_USER}@${TARGET_IP} "rm -f /tmp/get_netcard_name.sh"
		ssh ${TARGET_USER}@${TARGET_IP} \
			"route add -net ${CONF_HOST_NET} netmask 255.255.255.0 gw ${ROUTE_IP} dev $CONF_TARGET_NETCARD_NAME"
		if [ $? -ne 0 ]
		then
			echo "Add route fail on ${TARGET_IP}"
			return 1
		fi
		ssh ${TARGET_USER}@${TARGET_IP} "ping $HOST_IP_t" -w 3 > /dev/null 2>&1
		if [ $? -eq 0 ]
		then
			break
		else
			ssh ${TARGET_USER}@${TARGET_IP} \
			"route del -net ${CONF_HOST_NET} netmask 255.255.255.0 gw ${ROUTE_IP}"
		fi
		netcard_count=`expr $netcard_count '+' 1`
	done
	return 0
}

get_host_ip()
{
	local get_host_ip_flag=0
	local netcard_num=0
	local netcard_count=0
	local ROUTE_IP=0
	local ROUTE_IP_LINE=0
	local LINE_COUNT=0
	netcard_num=`/sbin/ifconfig | grep -i "inet addr[[:blank:]]*:" | wc -l`
	netcard_count=1
	while [ $netcard_count -le $netcard_num ]
	do
		HOST_IP_t=`/sbin/ifconfig | grep -i "inet addr[[:blank:]]*:" | head -n $netcard_count | tail -n 1`
		HOST_IP_t=`echo $HOST_IP_t | awk -F "[[:blank:]]" '{print $2}'`
		HOST_IP_t=${HOST_IP_t##*:}
		if [ "$HOST_IP_t" = 127.0.0.1 ]
		then
			netcard_count=`expr $netcard_count '+' 1`
			continue
		fi
		ssh ${TARGET_USER}@${TARGET_IP} "ping $HOST_IP_t -w 3" > /dev/null 2>&1
		if [ $? -eq 0 ]
		then
			get_host_ip_flag=1
			#return 0
			break
		fi
		netcard_count=`expr $netcard_count '+' 1`
	done
	if [ "$get_host_ip_flag" != 1 ] || [ "$HOST_IP_t" = 127.0.0.1 ]
	then
		if [ x"$1" != x"re_enter" ]
		then
			try_to_add_route
			if [ $? -ne 0 ]
			then
				LINE_COUNT=`sed -n "/EMPTY_HOST_MODIYFY_ENABLE/=" ./hostconf | head -n 1`
				if [ x"$LINE_COUNT" != x ]
				then
					sed -i "${LINE_COUNT}s/EMPTY_HOST_MODIYFY_ENABLE/AUTO_GET_HOST_FAIL/" ./hostconf
				fi
				return 1
			fi
			get_host_ip re_enter
			if [ $? -ne 0 ]
			then
				LINE_COUNT=`sed -n "/EMPTY_HOST_MODIYFY_ENABLE/=" ./hostconf | head -n 1`
				if [ x"$LINE_COUNT" != x ]
				then
					sed -i "${LINE_COUNT}s/EMPTY_HOST_MODIYFY_ENABLE/AUTO_GET_HOST_FAIL/" ./hostconf
				fi
				return 1
			fi
		else
			return 1
		fi
	fi
	LINE_COUNT=`sed -n "/EMPTY_HOST_MODIYFY_ENABLE/=" ./hostconf | head -n 1`
	if [ x"$LINE_COUNT" != x ]
	then
		sed -i "${LINE_COUNT}s/EMPTY_HOST_MODIYFY_ENABLE/${HOST_IP_t}/" ./hostconf
	fi
	return 0
}

if [ x"$HOST_IP_t" == x"EMPTY_HOST_MODIYFY_ENABLE" ];then
	get_host_ip
fi
cd $CURRENT_DIR

#pmfs临时适配方案
if [ x"$PERF_FS_TESTDIR" != x ]
then
	FS_TESTDIR=$PERF_FS_TESTDIR
fi

#add get_hostip and try_to_add_route above
if [ ! -f ${CONF_DIRc}/FS_TESTDIR.conf ]
then
    if [ x"$FS_TESTDIR" = x ]
    then
        scp ${CONF_DIRc}/get_FS_TESTDIR.sh ${TARGET_USER}@${TARGET_IP}:/tmp
        if [ $? -ne 0 ]
        then
            echo "scp get_FS_TESTDIR.sh to ${TARGET_IP}:/tmp fail"
            exit 1
        fi
        ssh ${TARGET_USER}@${TARGET_IP} "cd /tmp ; ./get_FS_TESTDIR.sh"
        if [ $? -ne 0 ]
        then
            echo "get path for test fail"
            exit 1
        fi
        scp ${TARGET_USER}@${TARGET_IP}:/tmp/FS_TESTDIR.conf ${CONF_DIRc}
        if [ $? -ne 0 ]
        then
            echo "can't cp FS_TESTDIR.conf from ${TARGET_IP}"
            exit 1
        fi
        ssh ${TARGET_USER}@${TARGET_IP} "rm -f /tmp/get_FS_TESTDIR.sh /tmp/FS_TESTDIR.conf"
    else
        echo $FS_TESTDIR > ${CONF_DIRc}/FS_TESTDIR.conf
    fi
	TARGET_INSTALL_DIR_BASE=`cat ${CONF_DIRc}/FS_TESTDIR.conf`
	TARGET_INSTALL_DIR=${TARGET_INSTALL_DIR_BASE}/${TESTSUITE_NAME}/testcase/bin
	#if target board has no disk device , use /tmp to install 
	if [ "$TARGET_INSTALL_DIR" = "" ]
	then
		TARGET_INSTALL_DIR="/tmp/${TESTSUITE_NAME}/testcase/bin"
		TARGET_INSTALL_DIR_BASE='/tmp'
	fi
	
	grep "^TARGET_INSTALL_DIR_BASE=" ${CONF_DIRc}/testconf > /dev/null
	if [ $? -ne 0 ]
	then
		echo "TARGET_INSTALL_DIR_BASE=$TARGET_INSTALL_DIR_BASE" >> ${CONF_DIRc}/testconf	
	fi
	
	grep "^TARGET_INSTALL_DIR=" ${CONF_DIRc}/testconf > /dev/null
	if [ $? -ne 0 ]
	then
		echo "TARGET_INSTALL_DIR=$TARGET_INSTALL_DIR" >> ${CONF_DIRc}/testconf	
	fi
	
	echo TARGET_INSTALL_DIR_BASE=$TARGET_INSTALL_DIR_BASE > ${CONF_DIRc}/FS_TESTDIR.conf
	echo TARGET_INSTALL_DIR=$TARGET_INSTALL_DIR >> ${CONF_DIRc}/FS_TESTDIR.conf
else
	source ${CONF_DIRc}/FS_TESTDIR.conf
fi

if [ ! -f ${CONF_DIRc}/expectconf ]
then
	cd ${CONF_DIRc} 
	cp expectconf.in expectconf
	set -e
	sed -i "s/IP_ADDR/${TARGET_IP}/" expectconf
	install_dir=$TARGET_INSTALL_DIR
	install_dir=`echo $install_dir | sed "s/\//\\\\\\\\\//g"`
	sed -i "s/INSTALL_DIR/${install_dir}/" expectconf
	target_user="`grep "TARGET_USER" hostconf | sed "s/'//g" | head -n 1`"
	target_user=${target_user#*=}
	target_user=`echo $target_user | sed "s/\//\\\\\\\\\//g"`
	sed -i "s/TARGET_USER/${target_user}/" expectconf
	cd $OLDPWD
	set +e
fi


target_load()
{
    local ret=0
	local exp_arg_count=0
	local arg[0]=""
	local arg[1]=""
	local arg[2]=""
	local arg[3]=""
	local arg[4]=""
	local arg[5]=""
	local arg[6]=""
	local arg[7]=""
	local arg[8]=""
	local arg[9]=""
    which expect > /dev/null
    if [ $? -eq 0 ] && [ x"$USE_EXPECT" = x1 ]
    then
		CURRENT_DIRc=`pwd`
		cd $CONF_DIRc
		TARGET_HOSTNAME=`ssh ${TARGET_USER}@${TARGET_IP} "cat /proc/sys/kernel/hostname"`
		if [ ! -f ./expectconf ]
		then
			echo "expectconf missing , please run compile first"
			cd $CURRENT_DIRc
			return 1
		fi
		grep "^set[[:blank:]]*TARGET_HOSTNAME[[:blank:]]*..*" expectconf > /dev/null
		if [ $? -ne 0 ]
		then
			echo "set TARGET_HOSTNAME ${TARGET_HOSTNAME}" >> expectconf	
		fi
		while [ $exp_arg_count -lt `echo $* | awk -F ';' '{print NF}'` ]
		do
			arg[${exp_arg_count}]=`echo $* | awk -F ';' '{print $i}' i=$((exp_arg_count+1))`
			exp_arg_count=`expr $exp_arg_count '+' 1`
		done
		./send_command.exp "${arg[0]}" "${arg[1]}" "${arg[2]}" "${arg[3]}" "${arg[4]}" 
		ret=$?
		cd $CURRENT_DIRc
    else
        ssh -t ${TARGET_USER}@${TARGET_IP} $*
        ret=$?
    fi
    return $ret
}

target_copy()
{
    local ret
    ssh ${TARGET_USER}@${TARGET_IP} "mkdir -p $2"
	scp -r $1 ${TARGET_USER}@${TARGET_IP}:$2
    ret=$?
    return $ret
}

#lmbench_data row col
lmbench_data()
{
    if [ $# != 2 ]
    then
        echo "This function need two parameters"
        return 1
    fi
    local first_row=$1
    local second_row=`expr $first_row '+' 1`
    local third_row=`expr $first_row '+' 2`
    local column_num=$2
    local column_num_current=0
    local column_count=1
    local flag=0
    local first_ch
    local second_ch
    local third_ch
    local start_byte=0
    local end_byte=0
    while :
    do
        first_ch=`sed -n ${first_row}p $LMBENCH_RESULT | cut -c $column_count` 
        second_ch=`sed -n ${second_row}p $LMBENCH_RESULT | cut -c $column_count`
        third_ch=`sed -n ${third_row}p $LMBENCH_RESULT | cut -c $column_count`
        if [ $flag = 0 ]
        then
            echo "${first_ch}${second_ch}${third_ch}" | grep "[^[:blank:]]" > /dev/null
            if [ $? -eq 0 ]
            then
                flag=1
                column_num_current=`expr $column_num_current '+' 1`
                if [ $column_num_current -eq $column_num ]
                then
                    start_byte=$column_count
                else 
                    if [ $column_num_current -gt $column_num ]
                    then
                        echo "Second parameter error"
                        return 1
                    fi
                fi
            fi
        fi
        if [ $flag = 1 ]
        then
            #don't add double quotation marks here
            echo ${first_ch}${second_ch}${third_ch} | grep "." > /dev/null   
            if [ $? -ne 0 ]
            then
                flag=0
                #it seems that this is not necessary , but for safe
                end_byte=`expr $column_count '-' 1`
            fi
        fi
        if [ "$start_byte" != 0 ] && [ "$flag" = 0 ]
        then
            break
        fi
        column_count=`expr $column_count '+' 1`
    done
    fret=`sed -n \`expr $first_row '+' 3\`p $LMBENCH_RESULT | cut -c ${start_byte}-${end_byte}`
    if [ $? -ne 0 ]
    then
        echo "Get data fail,line $first_row ,the $column_num index"
        return 1
    fi
    fret=${fret%\.}
    echo $fret
    return 0
}


