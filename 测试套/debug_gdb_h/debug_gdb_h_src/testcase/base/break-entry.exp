#!/usr/bin/expect -f 
# Copyright (C) 2010-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test inferior can stop at its very first instruction, usually "_start".
# Dynamic executables have first instruction in ld.so.

# If we're using a stub, we'll already be debugging a live program and
# stopped at the entry point when we connect, and so the runto below
# will issue a "continue", which always skips any breakpoint at PC.
# When testing with a native target (or some other target that supports
# "run"), runto will do a "run", which first creates the process,
# leaving the PC at the entry point, just like the stub case, but then
# continues the process with the equivalent of "jump *$PC", which
# triggers any breakpoint at $PC.  The latter is what we want to test.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"
set testfile break-entry

#if [target_info exists use_gdb_stub] {
#    untested ${testfile}.exp
#    return
#}

#if { [prepare_for_testing ${testfile}.exp ${testfile} start.c {additional_flags=-static}] } {
#    return -1
#}

gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$gdb_prompt"
set test "info files"
set entry ""
send "$test\n"
expect {
    -re "\r\n\[\t \]*Entry point:\[\t \]*(0x\[0-9a-f\]+)\r\n.*$gdb_prompt" {
	set entry $expect_out(1,string)
    send_user "pass $test"
    }
}
if {$entry == ""} {
#    untested ${testfile}.exp
    exit -1
}

#if {[istarget powerpc64-*] && [is_lp64_target]} {
#    set test "convert entry point"
#    gdb_test_multiple "p *(void(*)(void) *) $entry" $test {
#	-re " =( \\(\[^0-9\]*\\))? (0x\[0-9a-f\]+)( <.*)?\r\n$gdb_prompt $" {
#	    set entry $expect_out(2,string)
#       pass $test
#	}
#    }
#}

if ![runto "*$entry"] {
    exit -1
}
gdb_test "p/x \$pc" " = $entry"

gdb_breakpoint "main"
gdb_continue_to_breakpoint "main" "\\.?main.*"
exit $GRET

interact
