#!/usr/bin/expect -f 
#   Copyright 2007, 2009-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"
#if $tracelevel then {
#    strace $tracelevel
#}

#
# test running programs
#

#if {[skip_shlib_tests]} {
#    return 0
#}

set testfile "watchpoint-solib"
set libfile "watchpoint-solib-shr"
set libname "${libfile}.so"
set libsrcfile ${libfile}.c
set srcfile $testfile.c
set binfile $testfile
set libsrc  $libfile.c
set lib_sl  $libname
#set lib_dlopen [shlib_target_file ${libname}]

#if [get_compiler_info ${binfile}] {
#    return -1
#}

#set lib_opts debug
#set exec_opts [list debug shlib_load additional_flags=-DSHLIB_NAME\=\"${lib_dlopen}"]

#if { [gdb_compile_shlib $libsrc $lib_sl $lib_opts] != ""
#     || [gdb_compile $srcfile $binfile executable $exec_opts] != ""} {
#    untested "Couldn't compile $libsrc or $srcfile."
#    return -1
#}

# Start with a fresh gdb.

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"
gdb_test "'$GDB_TOOL_DIR'gdb $binfile" "$gdb_prompt"
#gdb_load ${binfile}
#gdb_load_shlibs $lib_sl

#if [target_info exists gdb_stub] {
#    gdb_step_for_stub;
#}

runto_main

# Disable hardware watchpoints if necessary.
#if [target_info exists gdb,no_hardware_watchpoints] {
    gdb_test_no_output "set can-use-hw-watchpoints 0" ""
#}

# Test that if we set a watchpoint on a global variable
# in a explicitly loaded shared library, and then
# re-run the application, gdb does not crash.
send "break foo\n"
expect {
     -re ".*Make breakpoint pending.*y or \\\[n\\\]" {
	    gdb_test "y" "Breakpoint.*foo.*pending." "set pending breakpoint"
     }
}

set prev_timeout $timeout
set timeout 120

gdb_test "continue" ".*Breakpoint 2.*foo.*" "continue to foo"
gdb_test "watch g" "atchpoint 3: g" "set watchpoint on g"
gdb_test "continue" ".*New value = 1.*" "continue to watchpoint hit"


if [rerun_to_main] {
    send_user "rerun_to_main fail"
    exit $GRET
}

send "continue\n"
expect {
    -timeout 60
    -re ".*Breakpoint 2.*foo.*" {
    }
    timeout {
        set GRET [expr $GRET + 1]
        send_user " timeout 128\n"
    }
}
send "continue\n"
expect {
    -timeout 60
    -re ".*New value = 1.*" {
    }
    timeout {
        set GRET [expr $GRET + 1]
        send_user " timeout 138\n"
    }
}

set timeout $prev_timeout
exit $GRET

interact
