#!/usr/bin/expect -f 
# Copyright 2002-2003, 2005, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# code_elim.exp -- tests that GDB can handle executables where some data/code
#                  has been eliminated by the linker.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"
#if $tracelevel then {
#    strace $tracelevel
#}

set testfile1 code_elim1
set testfile2 code_elim2
set srcfile1 ${testfile1}.c
set srcfile2 ${testfile2}.c
set binfile1 ${testfile1}
set binfile2 ${testfile2}
set opts [list debug]
lappend opts "additional_flags=-ffunction-sections"
lappend opts "additional_flags=-fdata-sections"
lappend opts "additional_flags=-Wl,-gc-sections"
lappend opts "additional_flags=-Wl,-e,main"

send_user "opts = $opts"

#remote_exec build "rm -f ${binfile1}"
#remote_exec build "rm -f ${binfile2}"

#if { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile1}" executable $opts] != "" } {
#     untested code_elim.exp
#     return -1
#}

#if { [gdb_compile "${srcdir}/${subdir}/${srcfile2}" "${binfile2}" executable $opts] != "" } {
#     untested code_elim.exp
#     return -1
#}

proc get_var_address { var } {
    global gdb_prompt hex

    # Match output like:
    # $1 = (int *) 0x0
    # $5 = (int (*)()) 0
    # $6 = (int (*)()) 0x24 <function_bar>

    send "print &${var}\n"
    expect {
	-re "\\\$\[0-9\]+ = \\(.*\\) (0|$hex)( <${var}>)?.*$gdb_prompt" {
#	    pass "get address of ${var}"
	    if { $expect_out(1,string) == "0" } {
		return "0x0"
	    } else {
		return $expect_out(1,string)
	    }
	}
    }
    return ""
}

proc not_null_var_address { var } {

    # Same as get_var_address, expect that it reports a failure if a null
    # address is returned by gdb.

    set address [get_var_address $var]
    regexp "0x\[0-9a-fA-F\]+" $address address
    if { "$address" == "0x0" } {
	send_user "fail $var has null address"
    set GRET [expr $GRET + 1]
    }
}

proc test_eliminated_var { var } {
    global gdb_prompt hex

    # Match output 'No symbol "${var}" in current context'

    gdb_test "print &${var}"  "No symbol \"${var}\" in current context.*$gdb_prompt"
}

# Check that the code and data eliminated in binfile1 are not included
# into partial symtab... and that non-eliminated symbols are still there.


gdb_test "'$GDB_TOOL_DIR'gdb " "$gdb_prompt"
#gdb_test "add-symbol-file ${binfile1} 0x100000" "add symbol table from file \".*${testfile1}\" at\[ \t\r\n\]+\.text_addr = 0x100000\[\r\n\]+\\(y or n\\)"
gdb_test "add-symbol-file ${binfile1} 0x100000" "add symbol table from file \".*${testfile1}\" at.*text_addr = 0x100000.*\\(y or n\\)"
gdb_test "y" "$gdb_prompt"
#	"Reading symbols from .*${testfile1}\\.\\.\\.done\\.(|\r\nUsing host libthread_db library .*libthread_db.so.*\\.)" \
#	"add-symbol-file ${testfile1} 0x100000" \
#	"add symbol table from file \".*${testfile1}\" at\[ \t\r\n\]+\.text_addr = 0x100000\[\r\n\]+\\(y or n\\) " \
#	"y"

test_eliminated_var my_global_symbol
test_eliminated_var my_static_symbol
test_eliminated_var my_global_func
not_null_var_address main

# Same thing for symtabs

gdb_exit
#global                   GDBFLAGS
#set saved_gdbflags $GDBFLAGS
#set GDBFLAGS "$GDBFLAGS --readnow $binfile1"
#set GDBFLAGS $saved_gdbflags
#gdb_start
gdb_test "'$GDB_TOOL_DIR'gdb --readnow $binfile1" "$gdb_prompt"

test_eliminated_var my_global_symbol
test_eliminated_var my_static_symbol
test_eliminated_var my_global_func
not_null_var_address main

# binfile2 contains the symbols that have been eliminated in binfile1. Check
# the eliminated symbols does not hide these valid ones.

gdb_exit
#        gdb_start

gdb_test "'$GDB_TOOL_DIR'gdb" "$gdb_prompt"

#gdb_test "add-symbol-file ${binfile1} 0x100000" "add symbol table from file \".*${testfile1}\" at\[ \t\r\n\]+\.text_addr = 0x100000\[\r\n\]+\\(y or n\\) "
gdb_test "add-symbol-file ${binfile1} 0x100000" "add symbol table from file \".*${testfile1}\" at.*text_addr = 0x100000.*\\(y or n\\)"
gdb_test "y" "$gdb_prompt"

sleep 1
#gdb_test "add-symbol-file ${binfile2} 0x200000" "add symbol table from file \".*${testfile2}\" at\[ \t\r\n\]+\.text_addr = 0x200000\[\r\n\]+\\(y or n\\)" 
gdb_test "add-symbol-file ${binfile2} 0x200000" "add symbol table from file \".*${testfile2}\" at.*text_addr = 0x200000.*\\(y or n\\)" 
gdb_test "y" "$gdb_prompt"

not_null_var_address my_global_symbol
not_null_var_address my_static_symbol
not_null_var_address my_global_func
not_null_var_address main

# Same thing, but loading binfile2 before binfile1.

gdb_exit
#gdb_start

gdb_test "'$GDB_TOOL_DIR'gdb " "$gdb_prompt"
#gdb_test "add-symbol-file ${binfile2} 0x200000" "add symbol table from file \".*${testfile2}\" at\[ \t\r\n\]+\.text_addr = 0x200000\[\r\n\]+\\(y or n\\) "
gdb_test "add-symbol-file ${binfile2} 0x200000" "add symbol table from file \".*${testfile2}\" at.*text_addr = 0x200000.*\\(y or n\\) "
gdb_test "y" "$gdb_prompt"

#gdb_test "add-symbol-file ${binfile1} 0x100000" "add symbol table from file \".*${testfile1}\" at\[ \t\r\n\]+\.text_addr = 0x100000\[\r\n\]+\\(y or n\\) "
gdb_test "add-symbol-file ${binfile1} 0x100000" "add symbol table from file \".*${testfile1}\" at.*text_addr = 0x100000.*\\(y or n\\) "
gdb_test "y" "$gdb_prompt"

not_null_var_address my_global_symbol
not_null_var_address my_static_symbol
not_null_var_address my_global_func
not_null_var_address main


exit $GRET

interact
