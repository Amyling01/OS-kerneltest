#!/usr/bin/expect -f 
#   Copyright 2011-2013 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Justin Lebar. (justin.lebar@gmail.com)

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"
#
# Tests skipping shared libraries.
#

# This only works on GNU/Linux.
#if { ![isnative] || [is_remote host] || ![istarget *-linux*] || [skip_shlib_tests]} {
#    continue
#}
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"
set test "skip-solib"
set srcfile_main "${test}-main.c"
set executable_main ${test}-test
set binfile_main ${executable_main}
set srcfile_lib "${test}-lib.c"
set libname "libskip-solib"
set binfile_lib ${libname}.so

#
# Compile our program under test.  The main program references a shared library
# libskip-solib.so, which contains two functions, square(), which is
# referenced by the main program, and multiply(), which is not referenced by
# the main program.
#

#if {[gdb_compile_shlib ${srcdir}/${subdir}/${srcfile_lib} ${binfile_lib} [list debug additional_flags=-fPIC -Wl,-soname,${libname}.so]] != ""} {
#    return -1
#}

#if {[gdb_compile "${srcdir}/${subdir}/${srcfile_main}" "${binfile_main}.o" object debug] != ""} {
#    return -1
#}

#if {[gdb_compile "${binfile_main}.o" "${binfile_main}" executable \
#                 [list debug "additional_flags=-L${objdir}/${subdir} -l${test} \
#                                               -Wl,-rpath=${objdir}/${subdir}"]] != ""} {
#    return -1
#}

#clean_restart ${executable_main}
gdb_test "'$GDB_TOOL_DIR'gdb $executable_main" "$gdb_prompt"

#
# At this point, if we try to skip the file ${srcfile_lib} or the function
# multiply(), we should get a prompt asking us if we want to enable the
# skip entry pending a shared library load.
#

gdb_test "skip file ${srcfile_lib}" \
  "No source file named ${srcfile_lib}.*Ignore file pending future shared library load.*" 
gdb_test   "y" "$gdb_prompt"
#  "File ${srcfile_lib} will be skipped when stepping." \
#  "ignoring file in solib" 

#
# Does info skip list this entry as pending?
#

set GDB_VERSION 0
send "show version\n"
expect {
	-timeout 3
		-re "GNU gdb \\(GDB\\).* (\[0-9\].\[0-9\]).*Copyright" {
			set GDB_VERSION $expect_out(1,string)
		}
	timeout {
		send_user "timeout 291"
	}
}
send_user "GDB_VERSION = $GDB_VERSION\n"

if { $GDB_VERSION == "7.5" } {
	gdb_test "info skip" \
		"Num\\s+Type\\s+Enb\\s+Address\\s+What\\s*
		1\\s+file\\s+y\\s+\\s+${srcfile_lib} \\(PENDING\\)\\s*" \
		"info skip with pending file"
} else {
	gdb_test "info skip" \
		"Num\\s+Type\\s+Enb\\s+What\\s*
		1\\s+file\\s+y\\s+${srcfile_lib}\\s*" \
		"info skip with pending file"
}


if ![runto_main] { 
    send_user "fail skip tests suppressed" 
    exit -1
    }

#
# We shouldn't step into square(), since we skipped skip-solib-lib.c.
#
gdb_test "step" ""
gdb_test "bt" "#0\\s+main.*" "step after ignoring solib file."

#
# Our entry should no longer be pending.  Note that we unfortunately need to do
# at least one step before the entry will be unmarked as pending.
#


#
# Now restart gdb and testing ignoring of a function inside a solib.
#
gdb_exit
#clean_restart ${executable_main}
gdb_test "'$GDB_TOOL_DIR'gdb ${executable_main}" "$gdb_prompt"

gdb_test "skip function multiply" \
"No function found named multiply.*" 
#Ignore function pending future shared library load.*" 
gdb_test  "y" "$gdb_prompt"

#  "Function multiply will be skipped when stepping, pending shared library load." \
#  "ignoring function in solib" 
if ![runto_main] { 
    send_user "fail skip tests suppressed" 
    exit -2
    }

#
# Our first step should take us into square.
#
gdb_test "step" "square.*"

#
# Now our entry should no longer be pending.
#

set hex_num {0x[0-9a-fA-F][0-9a-fA-F]*}
if { $GDB_VERSION == "7.5" } {
gdb_test "info skip" \
 "Num\\s+Type\\s+Enb\\s+Address\\s+What\\s*
1\\s+function\\s+y\\s+${hex_num}\\s+multiply at .*${srcfile_lib}:.*\\s*" \
 "skip should no longer be pending."
} else {
gdb_test "info skip" \
 "Num\\s+Type\\s+Enb\\s+What\\s*
1\\s+file\\s+y\\s+${srcfile_lib}\\s*" \
 "info skip with pending file"
}


#
# This step shouldn't go into multiply -- we should skip it and go on to the
# last line of square.
#
gdb_test "step" ""
#if {$ARCH == "powerpc"} {	
#gdb_test "bt" "#0.*call___do_global_ctors_aux"
#} else {
#gdb_test "bt" "#0\\s+square.*"
#}
gdb_test "bt" "#0\\s+square.*"
exit $GRET

interact
