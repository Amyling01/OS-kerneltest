#!/usr/bin/expect -f 
# This testcase is part of GDB, the GNU debugger.

# Copyright 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

# watch-thread_num.exp   Test thread <thread_num> parameter for
#                        watch commands.
#
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"

#if $tracelevel then {
#	strace $tracelevel
#}

# This test verifies that a watchpoint is detected in the proper thread
# so the test is only meaningful on a system with hardware watchpoints.
#if {[skip_hw_watchpoint_tests]} {
#    return 0
#}

set testfile watch_thread_num
set srcfile ${testfile}.c
set binfile ${testfile}

# What compiler are we using?
#
#if [get_compiler_info ${binfile}] {
#    return -1
#}

#if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}
gdb_test "'$GDB_TOOL_DIR'gdb $binfile" "$gdb_prompt"

if { ![runto main] } then {
   send_user "fail run to main"
   exit -1
}

gdb_test "watch shared_var thread 0" "Unknown thread 0\." "Watchpoint on invalid thread"
gdb_test "watch shared_var thread" "A syntax error in expression, near `thread'\." "Invalid watch syntax"

gdb_test "Next 5" ".*"

gdb_test "break thread_function" "Breakpoint \[0-9\].*" \
  "Set breakpoint at thread_function"

gdb_test "continue" ".*Breakpoint 2.*" "Stopped in thread_function"

send "thread\n" 
expect {
    -timeout 2
    -re "Current thread is (\[0-9\]*).*$gdb_prompt" {
    set thread_num $expect_out(1,string)
    }
    timeout {
    set GRET [expr $GRET + 1]        
    }
}

gdb_test_no_output "disable 2" "Disable breakpoint 2"
gdb_test "watch shared_var thread $thread_num" "Hardware watchpoint 3: shared_var" "Watchpoint on shared variable"
gdb_test "info breakpoint 3" "stop only in thread $thread_num"

for {set i 1} {$i <= 10} {incr i 1} {
    set watchpoint "Watchpoint triggered iteration $i"
    set check "Check thread that triggered iteration $i"

    gdb_test "continue" "Hardware watchpoint 3: shared_var.*" $watchpoint
    gdb_test "thread" ".*Current thread is $thread_num .*" $check
}

exit $GRET

interact
