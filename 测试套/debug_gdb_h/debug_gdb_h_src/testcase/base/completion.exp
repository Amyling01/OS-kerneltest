#!/usr/bin/expect -f 
# Copyright 1998-1999, 2002-2004, 2007-2012 Free Software Foundation,
# Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file was written by Elena Zannoni (ezannoni@cygnus.com)

# This file is part of the gdb testsuite.

#
# tests for command completion
#
# Here are some useful test cases for completion.  
# They should be tested with both M-? and TAB.
#
#   "show output-" "radix"
#   "show output" "-radix"
#   "p" ambiguous (commands starting with p--path, print, printf, etc.)
#   "p "  ambiguous (all symbols)
#   "info t foo" no completions
#   "info t " no completions
#   "info t" ambiguous ("info target", "info terminal", etc.)
#   "info ajksdlfk" no completions
#   "info ajksdlfk " no completions
#   "info" " "
#   "info " ambiguous (all info commands)
#   "p \"break1" unambiguous (completes to filename "break1.c")
#   "p \"break1." unambiguous (should complete to "break1.c" but does not,
#	due to readline limitations)
#   "p 'arg" ambiguous (all symbols starting with arg)
#   "p b-arg" ambiguous (all symbols starting with arg)
#   "p b-" ambiguous (all symbols)
#   "file Make" "file" (word break hard to screw up here)
#   "file ../gdb.stabs/we" "ird" (needs to not break word at slash)
#

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"

#if $tracelevel then {
#        strace $tracelevel
#        }


#global usestubs

#
# test running programs
#

set testfile "break"
set srcfile ${testfile}.c
set srcfile1 ${testfile}1.c
set binfile ${testfile}

#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug nowarnings}] != "" } {
#     untested completion.exp
#     return -1
#}

#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug nowarnings}] != "" } {
#     untested completion.exp
#     return -1
#}

#if  { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug nowarnings}] != "" } {
#     untested completion.exp
#     return -1
#}

#if [get_compiler_info ${binfile}] {
#    return -1;
#}

#gdb_exit

#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}
gdb_test "'$GDB_TOOL_DIR'gdb $binfile" "$gdb_prompt"

if ![runto_main] then {
        send_user "tests suppressed"
        exit -1
}

#set oldtimeout1 $timeout
#set timeout 30

set test "complete 'hfgfh'"
send_gdb "hfgfh\t"
gdb_test "" "hfgfh\\\x07" 
send_gdb "\n"
gdb_test "" "Undefined command: \"hfgfh\"\\.  Try \"help\"\\..*$gdb_prompt"

#exp_internal 0

set test "complete 'show output'"
send_gdb "show output\t"
gdb_test "" "show output-radix" 
send_gdb "\n"
gdb_test "" "Default output radix for printing of values is 10\\..*$gdb_prompt" 

set test "complete 'show output-'"
send_gdb "show output-\t"
gdb_test "" "show output-radix" 
send_gdb "\n"
gdb_test ""  "Default output radix for printing of values is 10\\..*$gdb_prompt" 

set test "complete 'p'"
send_gdb "p\t"
gdb_test "" "p\\\x07" 
send_gdb "\n"
gdb_test "" "The history is empty\\..*$gdb_prompt" 

set test "complete 'p '"
send_gdb "p \t"
gdb_test "" "p \\\x07" 
send_gdb "\n"
gdb_test "" "The history is empty\\..*$gdb_prompt" 

set test "complete 'info t foo'"
send_gdb "info t foo\t"
gdb_test "" "info t foo\\\x07" 
send_gdb "\n"
gdb_test "" "Ambiguous info command \"t foo\": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt" 

set test "complete 'info t'"
send_gdb "info t\t"
gdb_test "" "info t\\\x07" 
send_gdb "\n"
gdb_test "" "Ambiguous info command \"t\": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt" 

set test "complete 'info t '"
send_gdb "info t \t"
gdb_test "" "info t \\\x07" 
send_gdb "\n"
gdb_test "" "Ambiguous info command \"t \": target, tasks, terminal, threads, tp, tracepoints, tvariables, types\\..*$gdb_prompt" 

set test "complete 'info asdfgh'"
send_gdb "info asdfgh\t"
gdb_test "" "info asdfgh\\\x07" 
send_gdb "\n"
gdb_test "" "Undefined info command: \"asdfgh\".  Try \"help info\"\\..*$gdb_prompt" 

set test "complete 'info asdfgh '"
send_gdb "info asdfgh \t"
gdb_test "" "info asdfgh \\\x07" 
send_gdb "\n"
gdb_test "" "Undefined info command: \"asdfgh \".  Try \"help info\"\\..*$gdb_prompt" 

set test "complete 'info'"
send_gdb "info\t"
gdb_test "" "info" 
send_gdb "\n"
gdb_test "" "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands.*$gdb_prompt" 

set test "complete 'info '"
send_gdb "info \t"
gdb_test "" "info \\\x07" 
send_gdb "\n"
gdb_test "" "\"info\" must be followed by the name of an info command\\.\r\nList of info subcommands:\r\n\r\n.*$gdb_prompt" 

set test "complete (2) 'info '"
send_gdb "info \t"
gdb_test "" "info \\\x07" 
#send_gdb "\t"
#gdb_test ""  "types.*$gdb_prompt " 
send_gdb "\n"
gdb_test ""  "\"info\".*unambiguous\\..*$gdb_prompt" 

set test "complete 'help info wat'"
send_gdb "help info wat\t"
gdb_test "" "help info watchpoints" 
send_gdb "\n"
gdb_test "" "Status of specified watchpoints.*\r\n.*$gdb_prompt" 

set test "complete 'p \"break1'"
send_gdb "p \"break1\t"
send "\n"
expect {
    -re "p \"break1\\\x07" {
	    send_gdb "\n"
	    send "\n"
    }
    -re "p \"break1\\.c\"" {
	send_gdb "\n"
	gdb_test "" "$gdb_prompt" 
	}
    timeout {
        send_user "timeout 226"
        set GRET [expr $GRET + 1]
    }
}


set test "complete 'p \"break1.'"
send_gdb "p \"break1.\t\""
send "\n"
expect {
    -re "p \"break1\\.\\\x07" {
	send_gdb "\n"
	send "\n"
    }
    -re "p \"break1\\.c\"" {
	send_gdb "\n"
	gdb_test "" "$gdb_prompt" 
    }
    -re "p \"break1\\..*" {
	send_gdb "\n"
	send "\n"
    }
    timeout {
        send_user "timeout 249"
        set GRET [expr $GRET + 1]
    }
}

set test "complete 'p 'arg'"
send_gdb "p 'arg\t"
gdb_test "" "p 'arg\\\x07" 
send_gdb "\n"
gdb_test "" "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt" 

set test "complete (2) 'p 'arg'"
send_gdb "p 'arg\t"
send "\n" 
expect {
    -re "p 'arg\\\x07" {
	send_gdb "\t"
	send "\n" 
    expect {
	    -re "argv.*$gdb_prompt" {
		send_gdb "\n"
		gdb_test "" "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt" 
	    }
	    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)" {
		send_gdb "n"
		gdb_test "" "\\(gdb\\) p 'arg" 
		send_gdb "\n"
		gdb_test "" "(Invalid character constant\\.|Unmatched single quote\\.).*$gdb_prompt" 
		}
	    }
    }
    timeout {
        send_user "timeout 281"
        set GRET [expr $GRET + 1]
    }
}


# These tests used to try completing the shorter "p b-a".
# Unfortunately, on some systems, there are .o files in system
# libraries which declare static variables named `b'.  Of course,
# those variables aren't really in scope, as far as the compiler is
# concerned.  But GDB deliberately tries to be more liberal: if you
# enter an identifier that doesn't have any binding in scope, GDB will
# search all the program's compilation units for a static variable of
# the given name.
#
# This behavior can help avoid a lot of pedantry, so it's usually a
# good thing.  But in this test case, it causes GDB to print the value
# of some random variable, instead of giving us the "No symbol..."
# error we were expecting.
#
# For example, on S/390 linux, the file s_atan.c in libm.a declares a
# `b', which is a structure containing an int and a float, so GDB says
# ``Argument to arithmetic operation not a number or boolean'' instead
# of ``No symbol ...''.
#
# So, I'm hoping that there is no system with a static library variable named
# `no_var_by_this_name'.

set test "complete 'p no_var_named_this-arg'"
send_gdb "p no_var_named_this-arg\t"
gdb_test "" "p no_var_named_this-arg\\\x07" 
send_gdb "\n"
gdb_test "" "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt" 

set test "complete (2) 'p no_var_named_this-arg'"
send_gdb "p no_var_named_this-arg\t"
gdb_test "" "p no_var_named_this-arg\\\x07" 
send_gdb "\t"
send "\n" 
expect {
    -re "argv.*$gdb_prompt" {
 	send_gdb "\n"
   	gdb_test "" "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt" 
    }
    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)" {
   	gdb_test "n" "$gdb_prompt " 
   	gdb_test "" "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt" 
    }
#    timeout {
#        send_user "timeout 332" 
#        set GRET [expr $GRET + 1]
#    }
}

set test "complete (2) 'p no_var_named_this-'"
send_gdb "p no_var_named_this-\t"
gdb_test "" "p no_var_named_this-\\\x07" 
send_gdb "\t"
send "\n"
expect {
    -re "(There are $decimal possibilities\\.  Do you really\r\nwish to see them all.|Display all $decimal possibilities.) \\(y or n\\)" {
    gdb_test "n" "$gdb_prompt" 
  	gdb_test "" "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt" 
        }
    -re "argv.*$gdb_prompt" {
   	send_gdb "\n"
   	gdb_test "" "No symbol \"no_var_named_this\" in current context\\..*$gdb_prompt" {
        }
    }
#    timeout {
#        send_user "timeout 253"
#        set GRET [expr $GRET + 1]
#    }
}
    


set test "complete 'p values\[0\].a'"
send_gdb "p values\[0\].a\t"
gdb_test "" "p values.0..a_field" 
send_gdb "\n"
gdb_test "" " = 0.*$gdb_prompt" 

set test "complete 'p values\[0\] . a'"
send_gdb "p values\[0\] . a\t"
gdb_test "" "p values.0. . a_field" 
send_gdb "\n"
gdb_test "" " = 0.*$gdb_prompt" 

set test "complete 'p &values\[0\] -> a'"
send_gdb "p &values\[0\] -> a\t"
gdb_test "" "p &values.0. -> a_field" 
send_gdb "\n"
gdb_test "" " = .*0x\[0-9a-fA-F\]*.*$gdb_prompt" 

gdb_test "complete p &values\[0\]->z" \
    "p &values.0.->z_field" \
    "completion of field in anonymous union"

# The following tests used to simply try to complete `${objdir}/file',
# and so on.  The problem is that ${objdir} can be very long; the
# completed filename may be more than eighty characters wide.  When
# this happens, readline tries to manage things, producing output that
# may make sense on the screen, but is rather hard for our script to
# recognize.
#
# In the case that motivated this change, the (gdb) prompt occupied
# the leftmost six columns, and `${objdir}/' was seventy-four
# characters long --- eighty in all.  After printing the slash,
# readline emitted a space, a carriage return, and then `Makefile'
# (the tab character being received as input after `Make'.
#
# Basically, you have to let readline do whatever it's going to do to
# make the screen look right.  If it happens to use a different
# strategy on Tuesdays to get the cursor in the right place, that's
# not something the testsuite should care about.
#
# So, we avoid long lines.  We `cd' to ${objdir} first, and then do
# the completion relative to the current directory.

# ${srcdir} may be a relative path.  We want to make sure we end up
# in the right directory - so make sure we know where it is.
set mydir [pwd]
#cd ..
set fullsrcdir "/tmp/for_gdb_test/"
#cd ${mydir}

# If the directory name contains a '+' we must escape it, adding a backslash.
# If not, the test below will fail because it will interpret the '+' as a 
# regexp operator. We use string_to_regexp for this purpose.

gdb_test "shell cd ${fullsrcdir}" "$gdb_prompt"
#         "Working directory  /tmp/for_gdb_test.*" \
#         "cd to \${srcdir}"


# GDB used to fail adding / on directories, on the first try only.
set uniquedir $target_prompt/comp-dir
set escapeduniquedir  ${uniquedir}
set uniquesu subdi
set uniquesub ${uniquesu}r
set escapeuniquesub  ${uniquesub}
send_gdb "shell dir ${uniquedir}\t"
gdb_expect {
	-re "${escapeduniquedir}/" {
#	    pass "directory completion"
	    send_gdb "${uniquesu}\t"
	}
	-re "${escapeduniquedir}" {
	    send_user "fail directory completion (old gdb bug)"
        set GRET [expr $GRET + 1]
	    send_gdb "\b/${uniquesu}\t"
	}
	default {
	    send_user "fail directory completion (timeout)"
        set GRET [expr $GRET + 1]
	    send_gdb "\ndir ${uniquedir}/${uniquesu}\t"
	}
}

expect {
	-re "${escapeuniquesub}/" {
#	    pass "directory completion 2"
	}
	timeout {
	    send_user "fail directory completion 2"
        set GRET [expr $GRET + 1]
	}
}

# Empty COMMAND sends no newline while " " sends the newline we need.
gdb_test " " "Source directories searched: .*" "Glob remaining of directory test"

gdb_test "complete file ./gdb.base/compl" \
    "file ./gdb.base/completion\\.exp.*" \
    "complete-command 'file ./gdb.base/compl'"

set test "complete 'file ./gdb.base/complet'"
send_gdb "file ./gdb.base/complet\t"
gdb_test "" "file ./gdb.base/completion\\.exp" 
	send_gdb "\n"
	# Ignore the exact error message.
	send "\n"
    expect {
	    -re "\r\nA program is being debugged already\\.\[\r\n\]+Are you sure you want to change the file\\? \\(y or n\\)" {
		send_gdb "n\n"
		exp_continue
	    }
	    -re "$gdb_prompt" {
#		pass "$test"
	    }
	}

set test "complete 'info func marke'"
send_gdb "info func marke\t"
gdb_test "" "info func marke.*r" 
send_gdb "\t\t"
gdb_test "" "marker1.*$gdb_prompt" 
send_gdb "\n"
gdb_test "" "All functions matching regular expression \"marker\":.*File.*break1.c:\r\nint marker1\\((void|)\\);\r\nint marker2\\(int\\).*marker3\\(char.*char.*\\).*marker4\\(long( int)?\\);.*$gdb_prompt" 
		
set test "complete 'set follow-fork-mode'"
send_gdb "set follow-fork-mode \t\t"
gdb_test "" "child.*parent.*$gdb_prompt" 
send_gdb "\n"
send "\n"
expect {
	    -re "Requires an argument.*child.*parent.*$gdb_prompt" {
#		pass "$test"
	    }
	    -re "Ambiguous item \"\"\\..*$gdb_prompt" {
		tst_pass "$test"
	    }
	}

gdb_test_no_output "complete print values\[0\].x." \
    "field completion with invalid field"

# If there is a non-deprecated completion, it should be returned.
gdb_test "complete sav" "save" "test non-deprecated completion"
# If there is only a deprecated completion, then it should be returned.
gdb_test "complete save-t" "save-tracepoints" "test deprecated completion"


# Restore globals modified in this test...
set timeout $oldtimeout1

exit $GRET

interact
