#!/usr/bin/expect -f 
# Copyright 2010-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

if {$target_prompt == "USP"} {
    set ARCH "arm"
}

set target_prompt "/tmp/for_gdb_test/base"
gdb_test "cd /tmp/for_gdb_test/base" "$target_prompt"

set testfile "watchpoint-cond-gone"
set srcfile ${testfile}.c
set srcfilestripped ${testfile}-stripped.c
set objfilestripped ${testfile}-stripped.o
set binfile ${testfile}

# We need to generate a function without DWARF to crash older GDB.
# Stepping into a dynamic function trampoline or stepping out of MAIN may work
# but it is not a reliable FAIL case.

#if  { [gdb_compile "${srcdir}/${subdir}/${srcfilestripped}" "${objfilestripped}" object {}] != ""
#      || [gdb_compile "${srcdir}/${subdir}/${srcfile} ${objfilestripped}" "${binfile}" executable {debug}] != "" } {
#    untested watchpoint-cond-gone.exp
#    return -1
#}

#clean_restart ${testfile}

gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$gdb_prompt"
# Problem does not occur otherwise.
gdb_test_no_output "set can-use-hw-watchpoints 0"

if ![runto_main] {
    exit -1
}

gdb_breakpoint [gdb_get_line_number "watchpoint-here"]
gdb_continue_to_breakpoint "Place to set the watchpoint"

# The condition `c == 30' is the subject being tested.
gdb_test "watch c if c == 30" "atchpoint \[0-9\]*.*" "Place the watchpoint"

# We may stay either in the function itself or only at the first instruction of
# its caller depending on the epilogue unwinder (or valid epilogue CFI) presence.

#if {$ARCH=="powerpc"} {
#gdb_test "finish" \
#	 "Watchpoint .* deleted because the program has left the block in.*which its expression is valid..* jumper \\(jumpto=$hex <func>\\) at.*" \
#	 "Catch the no longer valid watchpoint"
#} else {
#gdb_test "finish" \
#	 "Watchpoint .*deleted because the program has left the block in.*which its expression is valid..*jumper \\(jumpto=$hex <func>\\) at.*" \
#	 "Catch the no longer valid watchpoint"
#}
gdb_test "finish" \
	"Watchpoint .*deleted because the program has left the block in.*which its expression is valid..*jumper \\(jumpto=$hex <func>\\) at.*" \
	"Catch the no longer valid watchpoint"

exit $GRET

interact
