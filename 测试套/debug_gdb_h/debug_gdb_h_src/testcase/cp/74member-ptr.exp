#!/usr/bin/expect -f 
# Copyright 1998-1999, 2003-2004, 2006-2012 Free Software Foundation,
# Inc.

# This file is part of the gdb testsuite

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Tests for pointer-to-member support
# Written by Satish Pai <pai@apollo.hp.com> 1997-08-19
# Rewritten by Michael Chastain <mec.gnu@mindspring.com> 2004-01-11

set vhn "\\$\[0-9\]+"

#if $tracelevel then {
#    strace $tracelevel
#}

#if { [skip_cplus_tests] } { continue }


set testfile "member-ptr"
set srcfile ${testfile}.cc
#set binfile ${objdir}/${subdir}/${testfile}

#if [get_compiler_info ${binfile} "c++"] {
#    return -1
#}

#if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug c++}] != "" } {
#     untested member-ptr.exp
#     return -1
#}


source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
set ARGC $argc
global GDBPROMPT
global GDB_TOOL_DIR
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/cp"
gdb_test "cd /tmp/for_gdb_test/cp" "$target_prompt"
gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$gdb_prompt"
if ![runto_main] then {
#    perror "couldn't run to breakpoint"
#    continue
    exit -1
}

gdb_breakpoint [gdb_get_line_number "Breakpoint 1 here"]
gdb_continue_to_breakpoint "continue to pmi = NULL"

# ======================
# pointer to member data
# ======================

# ptype on pointer to data member

set name "ptype pmi (A::j)"
gdb_test "ptype pmi" "type = int A::\\*.*$gdb_prompt" 

# print pointer to data member

set name "print pmi (A::j) "
send "print pmi\n"
expect {
    -timeout 5
    -re "$vhn = &A::j.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \\(int ?\\( ?A::\\*\\)\\) &A::j.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \\(int ?\\( ?A::\\*\\)\\) ?&A::j ?\\+ ?1 bytes.*$gdb_prompt" {
	# gcc 2.95.3 -gdwarf-2
	send_user "kfail gdb/NNNN $name"
    set GRET [expr $GRET + 1]
    }
    -re "$vhn = &A::j ?\\+ ?1 bytes.*$gdb_prompt" {
	# gcc 2.95.3 -gstabs+
	send_user "kfail gdb/NNNN $name 2"
    set GRET [expr $GRET + 1]
    }
    -re "$vhn = not implemented: member type in c_val_print.*$gdb_prompt" {
	# gcc HEAD 2004-01-11 05:33:21 -gdwarf-2
	# gcc HEAD 2004-01-11 05:33:21 -gstabs+
	send_user "kfail gdb/NNNN $name 4"
    set GRET [expr $GRET + 1]
    }
    -re "$vhn = \\(int ?\\( A::\\*\\)\\) 536870920.*$gdb_prompt" {
	# the value is 0x20000008 hex.   0x20000000 is an internal flag.
	# Use '|' to add in more values as needed.
	# hpacc A.03.45
	send_user "kfail gdb/NNNN $name 5"
    set GRET [expr $GRET + 1]
    }
    timeout {
    send_user "timeout 128"
    set GRET [expr $GRET + 1]
    }
}

# print dereferenced pointer to data member

set name "print a.*pmi (A::j)"
gdb_test "print a.*pmi" "$vhn = 121.*$gdb_prompt"

# print dereferenced pointer to data member
# this time, dereferenced through a pointer

set name "print a_p->*pmi (A::j)"
gdb_test "print a_p->*pmi" "$vhn = 121.*$gdb_prompt"

# set the pointer to a different data member

set name "set var pmi = &A::jj"
gdb_test "set var pmi = &A::jj" "set var pmi = &A::jj.*$gdb_prompt" 

# print the pointer again

set name "print pmi (A::jj)"
send "print pmi\n"
expect {
    -timeout 5
    -re "$vhn = &A::jj.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \\(int ?\\( ?A::\\*\\)\\) &A::jj.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = not implemented: member type in c_val_print.*$gdb_prompt" {
	# gcc HEAD 2004-01-11 05:33:21 -gdwarf-2
	# gcc HEAD 2004-01-11 05:33:21 -gstabs+
	send_user "kfail gdb/NNNN $name 1"
    set GRET [expr $GRET + 1]
    }
    -re "$vhn = \\(int ?\\( A::\\*\\)\\) 536870924.*$gdb_prompt" {
	# the value is 0x20000008 hex.   0x20000000 is an internal flag.
	# Use '|' to add in more values as needed.
	# hpacc A.03.45
	send_user "kfail gdb/NNNN $name 2"
    set GRET [expr $GRET + 1]
    }
    timeout {
    send_user "timeout 174"
    set GRET [expr $GRET + 1]
    }
}

# print dereferenced pointer to data member again

set name "print a.*pmi (A::jj)"
gdb_test "print a.*pmi" "$vhn = 1331.*$gdb_prompt"

# set the pointer to data member back to A::j

set name "set var pmi = &A::j"
gdb_test "set var pmi = &A::j"  "set var pmi = &A::j.*$gdb_prompt"

# print dereferenced pointer to data member yet again (extra check, why not)

set name "print a.*pmi (A::j) (again)"
gdb_test "print a.*pmi" "$vhn = 121.*$gdb_prompt" 

# Set the data member pointed to.

set name "print a.*pmi = 33"
gdb_test "print a.*pmi = 33" "$vhn = 33.*$gdb_prompt" 
# Now check that the data really was changed

set name "print a.*pmi (A::j) (33)"
gdb_test "print a.*pmi"  "$vhn = 33.*$gdb_prompt" 

# Double-check by printing a.

set name "print a (j = 33)"
send "print a\n"
expect {
    -re "$vhn = \{c = 120 'x', j = 33, jj = 1331, (static|static int) s = 10, (_vptr.A|_vptr\\$) = ($hex|$hex <A virtual table>)\}.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \{c = 120 'x', j = 33, jj = 1331, (static|static int) s = 10, Virtual table at $hex\}.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \{(_vptr.A|_vptr\\$) = $hex, c = 120 'x', j = 33, jj = 1331, (static|static int) s = 10\}.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \{(_vptr.A|_vptr\\$) = $hex, c = 120 'x', j = 121, jj = 1331, (static|static int) s = 10\}.*$gdb_prompt" {
	# gcc HEAD 2004-01-10 -gdwarf-2
	# gcc HEAD 2004-01-10 -gstabs+
	send_user "kfail gdb/NNNN $name"
    set GRET [expr $GRET + 1]
    }
    timeout {
        send_user "timeout 225"
        set GRET [expr $GRET + 1]
    }
}

# Set the data member pointed to, using ->*

set name "print a_p->*pmi = 44"
gdb_test "print a_p->*pmi = 44" "$vhn = 44.*$gdb_prompt"

# Check that the data really was changed

set name "print a_p->*pmi (44)"
gdb_test "print a_p->*pmi" "$vhn = 44.*$gdb_prompt"

# Double-check by printing a.

set name "print a (j = 44)"
send "print a\n"
expect {
    -re "$vhn = \{c = 120 'x', j = 44, jj = 1331, (static|static int) s = 10, (_vptr.A|_vptr\\$) = ($hex|$hex <A virtual table>)\}.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \{c = 120 'x', j = 44, jj = 1331, (static|static int) s = 10, Virtual table at $hex\}.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \{(_vptr.A|_vptr\\$) = $hex, c = 120 'x', j = 44, jj = 1331, (static|static int) s = 10\}.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \{(_vptr.A|_vptr\\$) = $hex, c = 120 'x', j = 121, jj = 1331, (static|static int) s = 10\}.*$gdb_prompt" {
	# gcc HEAD 2004-01-10 -gdwarf-2
	# gcc HEAD 2004-01-10 -gstabs+
	send_user "kfail gdb/NNNN $name"
    set GRET [expr $GRET + 1]
    }
    timeout {
    send_user "timeout 260"
    set GRET [expr $GRET + 1]
    }
}

# ptype the dereferenced pointer to member.

set name "ptype a.*pmi"
gdb_test "ptype a.*pmi" "type = int.*$gdb_prompt"

# dereference the pointer to data member without any object
# this is not allowed: a pmi must be bound to an object to dereference

set name "print *pmi"
gdb_test "print *pmi" "Attempt to dereference pointer to member without an object.*$gdb_prompt"

# dereference the pointer to data member without any object
# this is not allowed: a pmi must be bound to an object to dereference

set name "ptype *pmi"
gdb_test "ptype *pmi" "Attempt to dereference pointer to member without an object.*$gdb_prompt" 

# Check cast of pointer to member to integer.
# This is similar to "offset-of".
# such as "A a; print (size_t) &A.j - (size_t) &A".

set name "print (int) pmi"
gdb_test "print (int) pmi" "$vhn = (4|8|12).*$gdb_prompt"

# Check "(int) pmi" explicitly for equality.

set name "print ((int) pmi) == ((char *) &a.j - (char *) &a)"
gdb_test "print ((int) pmi) == ((char *) &a.j - (char *) & a)" "$vhn = true.*$gdb_prompt"

# ==========================
# pointer to member function
# ==========================

# ptype a pointer to a method

set name "ptype pmf"
gdb_test "ptype pmf" "type = int \\( ?A::\\*\\)\\(A \\*( const)?, int\\).*$gdb_prompt"

# print a pointer to a method

set name "print pmf"
gdb_test "print pmf" "$vhn = \\(int \\(A::\\*\\)\\(A \\*( const)?, int\\)\\) $hex <A::bar\\(int\\)>.*$gdb_prompt"

# ptype a pointer to a pointer to a method

set name "ptype pmf_p"
gdb_test "ptype pmf_p"  "type = int \\( ?A::\\*\\*\\)\\(A \\*( const)?, int\\).*$gdb_prompt"

# print a pointer to a pointer to a method

set name "print pmf_p"
send "print pmf_p\n"
expect {
    -re "$vhn = \\(int \\( ?A::\\*\\*\\)\\)\\(int\\)\\) $hex.*$gdb_prompt" {
	#pass $name
    }
    -re "$vhn = \\(PMF \\*\\) $hex.*$gdb_prompt" {
	#pass "gdb/NNNN"
    }
    -re "$vhn = \\(int \\( ?A::\\*\\*\\)\\(void\\)\\) $hex.*$gdb_prompt" {
	# hpacc A.03.45
	send_user "kfail gdb/NNNN $name 1"
    set GRET [expr $GRET + 1]
    }
    -re "$vhn = \\(struct \{.*\} \\*\\) $hex.*$gdb_prompt" {
	# gcc 2.95.3 -gdwarf-2
	send_user "kfail gdb/NNNN $name 2"
    set GRET [expr $GRET + 1]
    }
    timeout {
    send_user "timeout 369"
    set GRET [expr $GRET + 1]
    }
}

# print dereferenced pointer to method

set name "print a.*pmf"
gdb_test "print a.*pmf" "$vhn = {int \\(A \\*( const)?, int\\)} $hex <A::bar\\(int\\)>.*$gdb_prompt"

# print dereferenced pointer to method, using ->*

set name "print a_p->*pmf"
gdb_test "print a_p->*pmf" "$vhn = {int \\(A \\*( const)?, int\\)} $hex <A::bar\\(int\\)>.*$gdb_prompt"

# set the pointer to data member

set name "set var pmf = &A::foo"
gdb_test "set var pmf = &A::foo" "set var pmf = &A::foo.*$gdb_prompt"

# dereference the pointer to data member without any object
# this is not allowed: a pmf must be bound to an object to dereference

set name "print *pmf"
gdb_test "print *pmf" "Attempt to dereference pointer to member without an object.*$gdb_prompt" 

# dereference the pointer to data member without any object
# this is not allowed: a pmf must be bound to an object to dereference

set name "ptype *pmf"
gdb_test "ptype *pmf" "Attempt to dereference pointer to member without an object.*$gdb_prompt"

# Call a function through a pmf.

set name "print (a.*pmf)(3)"
gdb_test "print (a.*pmf)(3)" "$vhn = 50.*$gdb_prompt"

gdb_test "ptype a.*pmf" "type = int \\(A \\*( const)?, int\\)"

# Print out a pointer to data member which requires looking into
# a base class.
gdb_test "print diamond_pmi" "$vhn = &Base::x"
gdb_test "print diamond.*diamond_pmi" "$vhn = 77"

# Examine some more complicated pmfs, which require adjusting "this"
# and looking through virtual tables.

# These two have a different object adjustment, but call the same method.
gdb_test "print diamond.*left_pmf" \
    "$vhn = {int \\(Diamond \\*( const)?\\)} $hex <Base::get_x\\((void|)\\)>"
gdb_test "print diamond.*right_pmf" \
    "$vhn = {int \\(Diamond \\*( const)?\\)} $hex <Base::get_x\\((void|)\\)>"

gdb_test "print (diamond.*left_pmf) ()" "$vhn = 77"
gdb_test "print (diamond.*right_pmf) ()" "$vhn = 88"

# These two point to different methods, although they have the same
# virtual table offsets.
gdb_test "print diamond.*left_vpmf" \
    "$vhn = {int \\(Diamond \\*( const)?\\)} $hex <Left::vget\\((void|)\\)>"
gdb_test "print diamond.*right_vpmf" \
    "$vhn = {int \\(Diamond \\*( const)?\\)} $hex <Right::vget\\((void|)\\)>"

gdb_test "print (diamond.*left_vpmf) ()" "$vhn = 177"
gdb_test "print (diamond.*left_base_vpmf) ()" "$vhn = 2077"
gdb_test "print (diamond.*right_vpmf) ()" "$vhn = 288"

# We should be able to figure out left_vpmf even without an object,
# because it comes from a non-virtual base.  The same for right_vpmf.
gdb_test "print left_vpmf" "$vhn = &virtual Left::vget\\(\\)"
gdb_test "print right_vpmf" "$vhn = &virtual Right::vget\\(\\)"

# But we should gracefully fail to figure out base_vpmf, because
# its runtime type is more derived than its static type.  This
# is a valid but unspecified cast (it is value preserving, i.e.
# can be casted back to the correct type and used).
gdb_test "print base_vpmf" \
    "$vhn = &virtual table offset \[0-9\]*, this adjustment -\[0-9\]*"

# Make sure we parse this correctly; it's invalid.
gdb_test "print diamond.*left_vpmf ()" \
    "Invalid data type for function to be called\\."

# NULL pointer to member tests.
gdb_test "print null_pmi" "$vhn = NULL"
gdb_test "print null_pmi = &A::j" "$vhn = &A::j"
gdb_test "print null_pmi = 0" "$vhn = NULL"

gdb_test "print null_pmf" "$vhn = NULL"
gdb_test "print null_pmf = &A::foo" "$vhn = \\(int \\(A::\\*\\)\\(A \\*( const)?, int\\)\\) $hex <A::foo ?\\(int\\)>"
gdb_test "print null_pmf = 0" "$vhn = NULL"
exit $GRET

interact
