#!/usr/bin/expect -f 
# Copyright 2010-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if { [skip_cplus_tests] } { continue }
#if { [skip_shlib_tests] } { continue }

set testfile re-set-overloaded
set srcfile bool.cc
set executable $testfile
#set binfile $objdir/$subdir/$executable

set libsrcfile ${testfile}.cc
#set sofile $objdir/$subdir/${testfile}.so

# Create and source the file that provides information about the compiler
# used to compile the test case.
#if [get_compiler_info ${binfile} "c++"] {
#    return -1
#}

#if { [gdb_compile_shlib $srcdir/$subdir/$libsrcfile $sofile {debug c++}] != ""
#     || [gdb_compile $srcdir/$subdir/$srcfile $binfile executable [list debug "c++" shlib=${sofile}]] != ""} {
#    untested ${testfile}.exp
#    return -1
#}

#clean_restart $executable
#gdb_load_shlibs ${sofile}
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
set ARGC $argc
global GDBPROMPT
global GDB_TOOL_DIR
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}


set target_prompt "/tmp/for_gdb_test/cp"
gdb_test "cd /tmp/for_gdb_test/cp" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"
gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$gdb_prompt"

gdb_test_no_output "set breakpoint pending yes"
gdb_test "break C::C" {Breakpoint [0-9]+ \(C::C\) pending\.} "break C::C"
gdb_test_no_output {set variable $brk = $bpnum}

# runto or runto_main would call delete_breakpoints.
gdb_breakpoint "main"
gdb_run_cmd
gdb_test "" ".*" "start"

set test "breakpoint resolved"
gdb_test {info breakpoints $brk} ".*$gdb_prompt"
exit $GRET

interact
