#!/usr/bin/expect -f 
# Copyright 2006-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if $tracelevel then {
#	strace $tracelevel
#}


#if { [skip_cplus_tests] } { continue }
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
set ARGC $argc
global GDBPROMPT
global GDB_TOOL_DIR
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/cp"
gdb_test "cd /tmp/for_gdb_test/cp" "$target_prompt"

set testfile call-c
#set binfile ${objdir}/${subdir}/${testfile}
#set srcfilec ${srcdir}/${subdir}/${testfile}-1.c
#set srcfilecpp ${srcdir}/${subdir}/${testfile}.cc
#set objfilec ${objdir}/${subdir}/${testfile}-1.o
#set objfilecpp ${objdir}/${subdir}/${testfile}.o

#if {[gdb_compile "${srcfilec}" "${objfilec}" object {debug}] != ""
#    || [gdb_compile "${srcfilecpp}" "${objfilecpp}" object {c++ debug}] != ""
#    || [gdb_compile "${objfilecpp} ${objfilec}" "${binfile}" executable {c++ debug}] != ""} {
#    untested ${testfile}.exp
#    return -1
#}


gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$gdb_prompt"
runto_main

gdb_test "b [gdb_get_line_number {breakpoint here} ${testfile}.cc ]" \
	 ".*Breakpoint .*call-c.*"

gdb_test "print foo(1)" "\\\$$decimal = 1"
gdb_test "continue" ".*breakpoint here.*" "continue to bp"
gdb_test "print rf->func()" "\\\$$decimal = 1"

# Regression test for method call via a typedef.
gdb_test "print handle->func()" "\\\$$decimal = 1"
exit $GRET

interact
