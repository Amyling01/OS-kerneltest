#!/usr/bin/expect -f 
# Copyright 2011-2012 Free Software Foundation, Inc.
#
# Contributed by Red Hat, originally written by Keith Seitz.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is part of the gdb testsuite.
source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
set ARGC $argc
global GDBPROMPT
global GDB_TOOL_DIR
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/cp"
gdb_test "cd /tmp/for_gdb_test/cp" "$target_prompt"

# A helper proc which sets a breakpoint at FUNC and attempts to
# run to the breakpoint.
proc test_breakpoint {func result} {
    set DEC {[0-9]} 
    global GRET

    # Return to the top of the test function every time.
    delete_breakpoints
    if {![gdb_breakpoint test_function]} {
        send_user "fail set test_function breakpoint for $func"
        set GRET [expr $GRET + 1]
    } elseif {[gdb_test "continue" \
		   "Continuing.\r\n\r\nBreakpoint $DEC+,.*test_function.*" \
		   ""] != 0} {
        send_user "fail continue to test_function for $func"
        set GRET [expr $GRET + 1]
    } else {
        gdb_breakpoint "$func"
        gdb_test "continue" \
            "Continuing.\r\n\r\nBreakpoint $DEC+,.*$result.*" \
            "continue to $func"
    }
}

#if {[skip_cplus_tests]} { continue }

# Tests for c++/12750
set testfile "static-method"
set srcfile $testfile.cc

gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$gdb_prompt"
#if {[prepare_for_testing $testfile $testfile $srcfile {c++ debug}]} {
#    return -1
#}

# The GDB workaround for GCC PR debug/45682 does not apply as it requires
# DW_AT_linkage_name of methods.  The whole class A is in anonymous namespace,
# therefore not accessible outside of the CU (compilation unit) and therefore
# GCC does not produce DW_AT_linkage_name for such methods.

set have_gcc_45682_fixed 1
set test "info addr A::func()"
send "$test\n"
expect {
    -re "No symbol \"A::func\\(\\)\" in current context\\..*$gdb_prompt" {
#	pass $test
    }
    -re "Symbol \"A::func\\(\\)\" is a function at address .*$gdb_prompt" {
#	kfail gcc/45682 $test
	set have_gcc_45682_fixed 0
    }
}

if {![runto_main]} {
#    perror "couldn't run to breakpoint"
#    continue
    exit -1
}

set ans {(anonymous namespace)}
set methods {}
lappend methods "xxx::${ans}::func"
lappend methods "xxx::${ans}::A::func"

gdb_test_no_output "set listsize 1" ""

foreach test $methods {
    # The result we expect is the source code name of the symbol,
    # i.e., without "(anonymous namespace)".
    regsub -all [string_to_regexp "${ans}::"] $test "" expected
    set result ".*// [string_to_regexp $expected]"

    # Test whether the function/method can be "list"ed
    # with the filename pre-pended.
    if {[string compare $test "xxx::${ans}::A::func"] == 0
	&& !$have_gcc_45682_fixed} {
#	setup_kfail gcc/45682 "*-*-*"
    }
    gdb_test "list ${srcfile}:$test" $result
    if {[string compare $test "xxx::${ans}::A::func"] == 0
	&& !$have_gcc_45682_fixed} {
#	setup_kfail gcc/45682 "*-*-*"
    }
    gdb_test "list '${srcfile}:$test'" $result
    if {[string compare $test "xxx::${ans}::A::func"] == 0
	&& !$have_gcc_45682_fixed} {
#	setup_kfail gcc/45682 "*-*-*"
    }
    gdb_test "list '${srcfile}':'$test'" $result
    if {[string compare $test "xxx::${ans}::A::func"] == 0
	&& !$have_gcc_45682_fixed} {
#	setup_kfail gcc/45682 "*-*-*"
    }
    gdb_test "list ${srcfile}:'$test'" $result

    # Test setting and hitting a breakoint at the function/method.
    test_breakpoint $test $expected
    test_breakpoint "'$test'" $expected
}

gdb_exit
exit $GRET

interact
