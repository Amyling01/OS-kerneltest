#!/usr/bin/expect -f

source suite_lib.exp
global GRET;
set GRET 0;
global ARGC;
set ARGC $argc             
set GDBPROMPT "(gdb)"             
usage_exp
set target_ip [lindex $argv 0]
set target_prompt [lindex $argv 1]

spawn ssh root@$target_ip

expect {
    -timeout 2
        -re "$target_prompt*" {
#            send_user "string key match while ssh $target_ip"
        }   
    timeout {
#        send_user "Please check string key while ssh $target_ip"
            set GRET [expr $GRET + 1]
    }   
}

cmd_retkey "cd /mnt/nfs" "$target_prompt*" ""
cmd_retkey "gdb whatis" "$GDBPROMPT*" ""
cmd_retkey "b main" "$GDBPROMPT*"  ""
cmd_retkey "r" ".*v_char = 0;"  ""
cmd_retkey "whatis v_char" "type = (unsigned char|char)" ""


#if [target_info exists no_long_long] {
#    set exec_opts [list debug additional_flags=-DNO_LONG_LONG]
#} else {
#    set exec_opts [list debug]
#}


#proc setup_xfail_on_long_vs_int {} {
#    global gcc_compiled
#    if {!$gcc_compiled} {
#	setup_xfail "*-sun-sunos4*" "*-*-ultrix*" "i*86-sequent-bsd*"
#    }
#}

#if {!$gcc_compiled} then { setup_xfail "mips-sgi-irix*" }
cmd_retkey "whatis v_signed_char" \
    "type = (signed char|char)"  \
    "type = (signed char|char)" 

cmd_retkey "whatis v_unsigned_char" \
    "type = unsigned char"  \
    "type = unsigned char" 

cmd_retkey "whatis v_short" \
    "type = (short|short int)"  \
    "type = (short|short int)" 

cmd_retkey "whatis v_signed_short" \
    "type = (short|short int|signed short|signed short int)" \
    "type = (short|short int|signed short|signed short int)" 

cmd_retkey "whatis v_unsigned_short" \
    "type = (unsigned short|short unsigned int)" \
    "type = (unsigned short|short unsigned int)" 

cmd_retkey "whatis v_int" \
    "type = int" \
    "type = int" 

cmd_retkey "whatis v_signed_int" \
    "type = (signed |)int" \
    "type = (signed |)int" 

cmd_retkey "whatis v_unsigned_int" \
    "type = unsigned int" \
    "type = unsigned int" 

#setup_xfail_on_long_vs_int
# AIX xlc gets this wrong and unsigned long right.  Go figure.
#if {!$gcc_compiled} then {setup_xfail "rs6000-*-aix*"}
cmd_retkey "whatis v_long" \
    "type = (long|long int)" \
    "type = (long|long int)" 

#setup_xfail_on_long_vs_int
# AIX xlc gets this wrong and unsigned long right.  Go figure.
#if {!$gcc_compiled} then {setup_xfail "rs6000-*-aix*"}
cmd_retkey "whatis v_signed_long" \
    "type = (signed |)(long|long int)" \
    "type = (signed |)(long|long int)" 

#setup_xfail_on_long_vs_int
cmd_retkey "whatis v_unsigned_long" \
    "type = (unsigned long|long unsigned int)" \
    "type = (unsigned long|long unsigned int)" 


#if ![target_info exists no_long_long] {
    cmd_retkey "whatis v_unsigned_long_long" \
	"type = (unsigned long long|long long unsigned int)" \
	"type = (unsigned long long|long long unsigned int)" 
#}

cmd_retkey "whatis v_float" \
    "type = float" \
    "type = float" 

cmd_retkey "whatis v_double" \
    "type = double" \
    "type = double" 

# test whatis command with arrays
#
# We already tested whether char prints as "char", so here we accept
# "unsigned char", "signed char", and other perversions.  No need for more
# than one xfail for the same thing.
cmd_retkey "whatis v_char_array" \
    "type = (signed |unsigned |)char \\\[2\\\]" \
    "whatis v_char_array"


cmd_retkey "whatis v_signed_char_array" \
    "type = (signed |unsigned |)char \\\[2\\\]" \
    "whatis v_signed_char_array"

cmd_retkey "whatis v_unsigned_char_array" \
    "type = unsigned char \\\[2\\\]" \
    "whatis v_unsigned_char_array"

cmd_retkey "whatis v_short_array" \
    "type = (short|short int) \\\[2\\\]" \
    "whatis v_short_array"

cmd_retkey "whatis v_signed_short_array" \
    "type = (signed |)(short|short int) \\\[2\\\]" \
    "whatis v_signed_short_array"

cmd_retkey "whatis v_unsigned_short_array" \
    "type = (unsigned short|short unsigned int) \\\[2\\\]" \
    "whatis unsigned short array"

cmd_retkey "whatis v_int_array" \
    "type = int \\\[2\\\]" \
    "whatis int array"

cmd_retkey "whatis v_signed_int_array" \
    "type = (signed |)int \\\[2\\\]" \
    "whatis signed int array"

cmd_retkey "whatis v_unsigned_int_array" \
    "type = unsigned int \\\[2\\\]" \
    "whatis unsigned int array"

# We already tested whether long prints as long, so here we accept int
# No need for more than one xfail for the same thing.
cmd_retkey "whatis v_long_array" \
    "type = (int|long|long int) \\\[2\\\]" \
    "whatis long array"

cmd_retkey "whatis v_signed_long_array" \
    "type = (signed |)(int|long|long int) \\\[2\\\]" \
    "whatis signed long array"

cmd_retkey "whatis v_unsigned_long_array" \
    "type = (unsigned (int|long|long int)|long unsigned int) \\\[2\\\]" \
    "whatis unsigned long array"

#if ![target_info exists no_long_long] {
    cmd_retkey "whatis v_unsigned_long_long_array" \
	"type = (unsigned long long|long long unsigned int) \\\[2\\\]" \
	"whatis unsigned long array"
#}

cmd_retkey "whatis v_float_array" \
    "type = float \\\[2\\\]" \
    "whatis float array"

cmd_retkey "whatis v_double_array" \
    "type = double \\\[2\\\]" \
    "whatis double array"


# test whatis command with pointers
#
# We already tested whether char prints as char, so accept various perversions
# here.  We especially want to make sure we test that it doesn't print as
# caddr_t.
cmd_retkey "whatis v_char_pointer" \
    "type = (unsigned |signed |)char \\*" \
    "whatis char pointer"

cmd_retkey "whatis v_signed_char_pointer" \
    "type = (unsigned |signed |)char \\*" \
    "whatis signed char pointer"

cmd_retkey "whatis v_unsigned_char_pointer" \
    "type = unsigned char \\*" \
    "whatis unsigned char pointer"

cmd_retkey "whatis v_short_pointer" \
    "type = (short|short int) \\*" \
    "whatis short pointer"

cmd_retkey "whatis v_signed_short_pointer" \
    "type = (signed |)(short|short int) \\*" \
    "whatis signed short pointer"

cmd_retkey "whatis v_unsigned_short_pointer" \
    "type = (unsigned short|short unsigned int) \\*" \
    "whatis unsigned short pointer"

cmd_retkey "whatis v_int_pointer" \
    "type = int \\*" \
    "whatis int pointer"

cmd_retkey "whatis v_signed_int_pointer" \
    "type = (signed |)int \\*" \
    "whatis signed int pointer"

cmd_retkey "whatis v_unsigned_int_pointer" \
    "type = unsigned int \\*" \
    "whatis unsigned int pointer"

# We already tested whether long prints as long, so here we accept int
cmd_retkey "whatis v_long_pointer" \
    "type = (long|int|long int) \\*" \
    "whatis long pointer"

cmd_retkey "whatis v_signed_long_pointer" \
    "type = (signed |)(long|int|long int) \\*" \
    "whatis signed long pointer"

cmd_retkey "whatis v_unsigned_long_pointer" \
    "type = (unsigned (int|long|long int)|long unsigned int) \\*" \
    "whatis unsigned long pointer"

#if ![target_info exists no_long_long] {
    cmd_retkey "whatis v_long_long_pointer" \
	"type = long long(| int) \\*" \
	"whatis long long pointer"

    cmd_retkey "whatis v_signed_long_long_pointer" \
	"type = (signed |)long long(| int) \\*" \
	"whatis signed long long pointer"

    cmd_retkey "whatis v_unsigned_long_long_pointer" \
	"type = (unsigned long long|long long unsigned int) \\*" \
	"whatis unsigned long long pointer"
#}

cmd_retkey "whatis v_float_pointer" \
    "type = float \\*" \
    "whatis float pointer"

cmd_retkey "whatis v_double_pointer" \
    "type = double \\*" \
    "whatis double pointer"


#if { $hp_aCC_compiler } {
#    set unstruct "unnamed\.struct\..*"
#    set ununion "unnamed\.union\..*"
#} else {
    set unstruct "\.\.\."
    set ununion "\.\.\."
#}

# test whatis command with structure types
cmd_retkey "whatis v_struct1" \
    "type = struct t_struct" \
    "whatis named structure"

cmd_retkey "whatis struct t_struct" \
    "type = struct t_struct" \
    "whatis named structure using type name"

cmd_retkey "whatis v_struct2" \
    "type = struct \{$unstruct\}" \
    "whatis unnamed structure"


# test whatis command with union types
cmd_retkey "whatis v_union" \
    "type = union t_union" \
    "whatis named union"

cmd_retkey "whatis union t_union" \
    "type = union t_union" \
    "whatis named union using type name"

cmd_retkey "whatis v_union2" \
    "type = union \{$ununion\}" \
    "whatis unnamed union"


# HP-UX: HP aCC compiler w/ +objdebug option detects language as
# c++, so we need the 'void' pattern here.
# Without +objdebug compilation option we still need to match ''.
# - guo
# Also, using stabs we will mark these functions as prototyped.  This
# is harmless but causes an extra VOID to be printed.
set void "(void|)"

# test whatis command with functions return type
cmd_retkey "whatis v_char_func" \
    "type = (signed |unsigned |)char \\($void\\)" \
    "whatis char function"

cmd_retkey "whatis v_signed_char_func" \
    "type = (signed |unsigned |)char \\($void\\)" \
    "whatis signed char function"

cmd_retkey "whatis v_unsigned_char_func" \
    "type = unsigned char \\($void\\)"	\
    "whatis unsigned char function"

cmd_retkey "whatis v_short_func" \
    "type = short (int |)\\($void\\)" \
    "whatis short function"

cmd_retkey "whatis v_signed_short_func" \
    "type = (signed |)short (int |)\\($void\\)" \
    "whatis signed short function"

cmd_retkey "whatis v_unsigned_short_func" \
    "type = (unsigned short|short unsigned int) \\($void\\)" \
    "whatis unsigned short function"

cmd_retkey "whatis v_int_func" \
    "type = int \\($void\\)" \
    "whatis int function"

cmd_retkey "whatis v_signed_int_func" \
    "type = (signed |)int \\($void\\)" \
    "whatis signed int function"

cmd_retkey "whatis v_unsigned_int_func" \
    "type = unsigned int \\($void\\)" \
    "whatis unsigned int function"

cmd_retkey "whatis v_long_func" \
    "type = (long|int|long int) \\($void\\)" \
    "whatis long function"

cmd_retkey "whatis v_signed_long_func" \
    "type = (signed |)(int|long|long int) \\($void\\)" \
    "whatis signed long function"

cmd_retkey "whatis v_unsigned_long_func" \
    "type = (unsigned (int|long|long int)|long unsigned int) \\($void\\)" \
    "whatis unsigned long function"

#if ![target_info exists no_long_long] {
    cmd_retkey "whatis v_long_long_func" \
	"type = long long(| int) \\($void\\)" \
	"whatis long long function"

    cmd_retkey "whatis v_signed_long_long_func" \
	"type = (signed |)long long(| int) \\($void\\)" \
	"whatis signed long long function"

    cmd_retkey "whatis v_unsigned_long_long_func" \
	"type = (unsigned long long(| int)|long long unsigned int) \\($void\\)" \
	"whatis unsigned long long function"
#}

# Sun /bin/cc calls this a function returning double.
#if {!$gcc_compiled} then {setup_xfail "*-sun-sunos4*"}
cmd_retkey "whatis v_float_func" \
    "type = float \\($void\\)" \
    "whatis float function"

cmd_retkey "whatis v_double_func" \
    "type = double \\($void\\)" \
    "whatis double function" \


# test whatis command with some misc complicated types
cmd_retkey "whatis s_link" \
    "type = struct link \\*" \
    "whatis complicated structure"

cmd_retkey "whatis u_link" \
    "type = union tu_link" \
    "whatis complicated union"


# test whatis command with enumerations
cmd_retkey "whatis clunker" \
    "type = enum cars" \
    "whatis enumeration"

cmd_retkey "whatis enum cars" \
    "type = enum cars" \
    "whatis enumeration using type name"


# test whatis command with nested struct and union
cmd_retkey "whatis nested_su" \
    "type = struct outer_struct" \
    "whatis outer structure"

cmd_retkey "whatis nested_su.outer_int" \
    "type = int" \
    "whatis outer structure member"

#if {$hp_aCC_compiler} {
#    set outer "outer_struct::"
#} else {
    set outer ""
#}

cmd_retkey "whatis nested_su.inner_struct_instance" \
    "type = struct ${outer}inner_struct" ""

cmd_retkey "whatis nested_su.inner_struct_instance.inner_int" \
    "type = int" ""

cmd_retkey "whatis nested_su.inner_union_instance" \
    "type = union ${outer}inner_union" ""

cmd_retkey "whatis nested_su.inner_union_instance.inner_union_int" \
    "type = int" ""


cmd_retkey "whatis char_addr" \
    "type = char \\*" ""

cmd_retkey "whatis a_char_addr" \
    "type = char_addr" ""


exit $GRET

interact
