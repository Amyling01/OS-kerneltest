#!/usr/bin/expect -f 
# Copyright 1997, 1999, 2002-2004, 2007-2012 Free Software Foundation,
# Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

source ../lib/gdb_proc.exp
global target_dir
global GRET;
global BRET;
set GRET 0;
set BRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re
global PRODUCT_NAME
set PRODUCT_NAME $env(PRODUCT_NAME)

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

send "\n"
expect {
    -timeout 2
    -re "ONT*" {
    set BRET [expr $BRET + 1]
    }
    -re "MXU*" {
    set BRET [expr $BRET + 1]
    }
}

if { $PRODUCT_NAME == "SD5118-MXU-PON" } {
     set BRET 0 
}

set target_prompt "/tmp/for_gdb_test/base_test"
gdb_test "cd /tmp/for_gdb_test/base_test" "$target_prompt"

set testfile "attach"
set srcfile  ${testfile}.c
set srcfile2 ${testfile}2.c
set binfile  ${testfile}
set binfile2 ${testfile}2
set escapedbinfile  $target_prompt/${testfile}

proc do_attach_tests {} {
    global gdb_prompt
    global binfile
    global escapedbinfile
    global srcfile
    global testfile
    global objdir
    global subdir
    global timeout GRET BRET target_prompt GDB_TOOL_DIR
    
    # Start the program running and then wait for a bit, to be sure
    # that it can be attached to.

    set testpid 0
    send "./$binfile & \n"
    expect {
        -timeout 2
        -re "\\\[1\\\] (\[0-9\]+).*$target_prompt" {
        set testpid $expect_out(1,string)
        }
        timeout {
        }
    }
    if { $testpid == 0 } {
      if { $BRET == 1 } {
        send "ps | grep attach |grep -v \"grep attach\" \n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) root.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
        } else {
        send "ps -e | grep $binfile |grep -v \"grep $binfile\"\n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) pts.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
    }
	}
    # Avoid some race:
    sleep 2

    send_user "testpid = $testpid \n"

    # Verify that we cannot attach to nonsense.

gdb_test "'$GDB_TOOL_DIR'gdb" "$gdb_prompt"
    set test "attach to nonsense is prohibited"
    send "attach abc\n"
    expect {
	-re "Illegal process-id: abc\\..*$gdb_prompt" {
#	    pass "$test"
	}
	-re "Attaching to.*, process .*couldn't open /proc file.*$gdb_prompt" {
	    # Response expected from /proc-based systems.
#	    pass "$test" 
	}
	-re "Can't attach to process..*$gdb_prompt" {
	    # Response expected on          Cygwin
#	    pass "$test"
	}
	-re "Attaching to.*$gdb_prompt" {
	    send_user "fail $test (bogus pid allowed)"
        set GRET [expr $GRET + 1]
	}
    timeout {
        send_user "timeout attach abc"
        set GRET [expr $GRET + 1]
    }
    }

    # Verify that we cannot attach to nonsense even if its initial part is
    # a valid PID.

    set test "attach to digits-starting nonsense is prohibited"
    send "attach ${testpid}x\n"
    expect {
	-re "Illegal process-id: ${testpid}x\\..*$gdb_prompt" {
#	    pass "$test"
	}
	-re "Attaching to.*, process .*couldn't open /proc file.*$gdb_prompt" {
	    # Response expected from /proc-based systems.
#	    pass "$test" 
	}
	-re "Can't attach to process..*$gdb_prompt" {
	    # Response expected on Cygwin
#	    pass "$test"
	}
	-re "Attaching to.*$gdb_prompt" {
	    send_user "fail $test (bogus pid allowed)"
        set GRET [expr $GRET + 1]
	}
    timeout {
        send_user "timeout attach $testpid  x"
        set GRET [expr $GRET + 1]
    }
    }

    # Verify that we cannot attach to what appears to be a valid
    # process ID, but is a process that doesn't exist.  Traditionally,
    # most systems didn't have a process with ID 0, so we take that as
    # the default.  However, there are a few exceptions.

    set boguspid 0
    set test "attach to nonexistent process is prohibited"
    send "attach $boguspid\n"
    expect {
	-re "Attaching to process $boguspid.*No such process.*$gdb_prompt" {
	    # Response expected on ptrace-based systems (i.e. HP-UX 10.20).
#	    pass "$test"
	}
	-re "Attaching to process $boguspid failed.*Hint.*$gdb_prompt" {
	    # Response expected on ttrace-based systems (i.e. HP-UX 11.0).
#	    pass "$test"
	}
	-re "Attaching to process $boguspid.*denied.*$gdb_prompt" {
#	    pass "$test"
	}
	-re "Attaching to process $boguspid.*not permitted.*$gdb_prompt" {
#	    pass "$test"
	}
	-re "Attaching to process .*couldn't open /proc file.*$gdb_prompt" {
	    # Response expected from /proc-based systems.
#	    pass "$test"
	}
	-re "Can't attach to process..*$gdb_prompt" {
	    # Response expected on Cygwin
 #       pass "$test"
	}
    timeout {
        send_user "timeout 178"
        set GRET [expr $GRET + 1]
        }
    }
    
    # Verify that we can attach to the process by first giving its
    # executable name via the file command, and using attach with the
    # process ID.

    # (Actually, the test system appears to do this automatically for
    # us.  So, we must also be prepared to be asked if we want to
    # discard an existing set of symbols.)
    
    set test "set file, before attach1"
    send "file /tmp/for_gdb_test/base_test/$binfile\n"
    expect {
	-re "Load new symbol table from.*y or n." {
	    gdb_test "y" "Reading symbols from $escapedbinfile\.\.\.*done." \
		"$test (re-read)"
	}
	-re "Reading symbols from $escapedbinfile\.\.\.*done.*$gdb_prompt" {
#	    pass "$test"
	}
    timeout {
        send_user "timeout 202"
        set GRET [expr $GRET + 1]
    }
    }

    set test "attach1, after setting file"
    send "attach $testpid\n"
    expect {
	-re "Attaching to program.*`?$escapedbinfile'?, process $testpid.*main.*at .*$srcfile:.*$gdb_prompt" {
#	    pass "$test"
	}
	-re "Attaching to program.*`?$escapedbinfile\.exe'?, process $testpid.*\[Switching to thread $testpid\..*\].*$gdb_prompt" {
	    # Response expected on Cygwin
#	    pass "$test"
	}
    timeout {
        send_user "timeout 218"
        set GRET [expr $GRET + 1]
    }
    }

    # Verify that we can "see" the variable "should_exit" in the
    # program, and that it is zero.
   
    gdb_test "print should_exit" " = 0" "after attach1, print should_exit"

    # Detach the process.
   
    gdb_test "detach" \
	"Detaching from program: .*$escapedbinfile, process $testpid" \
	"attach1 detach"

    # Wait a bit for gdb to finish detaching
    
    sleep 5

    # Purge the symbols from gdb's brain.  (We want to be certain the
    # next attach, which won't be preceded by a "file" command, is
    # really getting the executable file without our help.)
    
#    set old_timeout $timeout
    set timeout 15 
    set test "attach1, purging symbols after detach"
    gdb_test "file" "No executable file now.*Discard symbol table.*y or n." 
    gdb_test "y" "No symbol file now." "$test"
#    set timeout $old_timeout

    # Verify that we can attach to the process just by giving the
    # process ID.
   
    set test "set file, before attach2"
    send "attach $testpid\n"
    expect {
	-re "Attaching to process $testpid.*Load new symbol table from \"$escapedbinfile\.exe\".*y or n." {
	    # On Cygwin, the DLL's symbol tables are loaded prior to the
	    # executable's symbol table.  This in turn always results in
	    # asking the user for actually loading the symbol table of the
	    # executable.
	    gdb_test "y" "Reading symbols from $escapedbinfile\.\.\.*done." \
		"$test (reset file)"
	}
	-re "Attaching to process $testpid.*Reading symbols from $escapedbinfile.*main.*at .*$gdb_prompt" {
#	    pass "$test"
	}
    timeout {
        send_user "timeout 267"
        set GRET [expr $GRET + 1]
    }
    }

    # Verify that we can modify the variable "should_exit" in the
    # program.

    gdb_test_no_output "set should_exit=1" "after attach2, set should_exit"

    # Verify that the modification really happened.

    gdb_test "tbreak 19" "Temporary breakpoint .*at.*$srcfile, line 19.*" \
	"after attach2, set tbreak postloop"

    gdb_test "continue" "main.*at.*$srcfile:19.*" \
	"after attach2, reach tbreak postloop"

    # Allow the test process to exit, to cleanup after ourselves.

    gdb_continue_to_end "after attach2, exit"

    # Make sure we don't leave a process around to confuse
    # the next test run (and prevent the compile by keeping
    # the text file busy), in case the "set should_exit" didn't
    # work.
   
    gdb_exit
    gdb_test "kill -9 ${testpid}" "$target_prompt"

    # Start the program running and then wait for a bit, to be sure
    # that it can be attached to.
   
    set testpid 0
    send "./$binfile & \n"
    expect {
        -timeout 2
        -re "\\\[1\\\] (\[0-9\]+).*$target_prompt" {
        set testpid $expect_out(1,string)
        }
        timeout {
        }
    }

    if { $testpid == 0 } {
if { $BRET == 1 } {
        send "ps | grep attach |grep -v \"grep attach\" \n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) root.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
        } else {
        send "ps -e| grep $binfile |grep -v \"grep $binfile\" \n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) pts.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
    }
}
    # Avoid some race:
    sleep 2

    send_user "testpid = $testpid \n"
    
    gdb_test "'$GDB_TOOL_DIR'gdb" "$gdb_prompt"
    gdb_test "dir $target_prompt" "Source directories searched: .*" \
	"set source path"

    gdb_test "cd /tmp" "Working directory /tmp." \
	"cd away from process working directory"

    # Explicitly flush out any knowledge of the previous attachment.

    set test "before attach3, flush symbols"
    send "symbol-file\n"
    expect {
	-re "Discard symbol table from.*y or n." {
	    gdb_test "y" "No symbol file now." \
		"$test"
	}
	-re "No symbol file now.*$gdb_prompt" {
#	    pass "$test"
	}
    timeout {
        send_user "timeout 348"
        set GRET [expr $GRET + 1]
    }
    }

    gdb_test "exec" "No executable file now." \
	"before attach3, flush exec"

    gdb_test "attach $testpid" \
	"Attaching to process $testpid.*Reading symbols from $escapedbinfile.*main.*at .*" \
	"attach when process' a.out not in cwd"

    set test "after attach3, exit"
    gdb_test "kill" "Kill the program being debugged.*y or n."
	gdb_test "y" "$gdb_prompt"
    
    # Another "don't leave a process around"
    gdb_exit
    gdb_test "kill -9 ${testpid}" "$target_prompt"
}

proc do_call_attach_tests {} {
    global gdb_prompt target_prompt
    global binfile2 GRET BRET GDB_TOOL_DIR
    
    # Start the program running and then wait for a bit, to be sure
    # that it can be attached to.
    set testpid 0
    send "./$binfile2 & \n"
    expect {
        -timeout 2
        -re "\\\[1\\\] (\[0-9\]+).*$target_prompt" {
        set testpid $expect_out(1,string)
        }
        timeout {
        }
    }

    if { $testpid == 0 } {
if { $BRET == 1 } {
        send "ps | grep attach |grep -v \"grep attach\" \n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) root.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
        } else {
        send "ps -e| grep $binfile2 |grep -v \"grep $binfile2\"\n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) pts.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
    }
}
    # Avoid some race:
    sleep 2

    send_user "testpid = $testpid \n"
   
    # Attach
gdb_test "'$GDB_TOOL_DIR'gdb" "$gdb_prompt"
   
    gdb_test "file $binfile2" ".*" "force switch to gdb64, if necessary"
    set test "attach call"
    send "attach $testpid\n"
    expect {
	-re "warning: reading register.*I.*O error.*$gdb_prompt" {
	    send_user "fail $test (read register error)"
        set GRET [expr $GRET + 1]
	}
	-re "Attaching to.*process $testpid.*libc.*$gdb_prompt" {
#	    pass "$test"
	}
	-re "Attaching to.*process $testpid.*\[Switching to thread $testpid\..*\].*$gdb_prompt" {
#	    pass "$test"
	}
    timeout {
        send_user "timeout 422"
        set GRET [expr $GRET + 1]
    }
    }

    # See if other registers are problems
    
    set test "info other register"
    gdb_test "i r r3" "r3.*$gdb_prompt" 

    # Get rid of the process
    
    gdb_test "p should_exit = 1"
    gdb_continue_to_end
   
    # Be paranoid
    gdb_exit
    gdb_test  "kill -9 ${testpid}" "$target_prompt"
}



# This is a test of gdb's ability to attach to a running process.

do_attach_tests

# Test attaching when the target is inside a system call

gdb_exit

do_call_attach_tests

exit $GRET

interact
