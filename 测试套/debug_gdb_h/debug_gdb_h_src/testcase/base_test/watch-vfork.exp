#!/usr/bin/expect -f

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc             
global GDBPROMPT             
global target_ip
global target_prompt

spawn ssh root@$target_ip
expect {
    -timeout 2
        -re "$target_prompt*" {}   
    timeout {
		send_user "\n*****error: ssh root@$target_ip failed*****\n"
		exit 1
    }   
}

set target_prompt "/tmp/for_gdb_test/base_test"
gdb_test "cd /tmp/for_gdb_test/base_test" "$target_prompt" ""

set testfile watch-vfork

gdb_test "'$GDB_TOOL_DIR'gdb $testfile" "$GDBPROMPT*" ""

# There's no support for vfork events in the remote protocol.
#if { [is_remote target] } {
#    return 0
#}

#if { [build_executable ${testfile}.exp ${testfile} ${testfile}.c {debug}] } {
#    untested ${testfile}.exp
#    return -1
#}

#proc target_info { op args } {
#    return [eval "board_info target \"$op\" $args]
#}

proc test_watchpoint_across_vfork { hw teststr } {
    global testfile

#    clean_restart ${testfile}

#	gdb_test "b main" "(gdb)" ""
#	gdb_test "r" ".*pid = vfork ();*" ""

    if { ![runto main] } then {
	tst_fail "run to main ($teststr)"
	return
    }

    if { ! $hw } {
	gdb_test "set can-use-hw-watchpoints 0" ""
    }

    gdb_test "watch global" \
	"atchpoint .*: global" \
	"Watchpoint on global variable ($teststr)"

    gdb_test "continue" \
	"atchpoint .*: global.*" \
	"Watchpoint triggers after vfork ($teststr)"
}

#if { ![target_info exists gdb,no_hardware_watchpoints] } {
#    test_watchpoint_across_vfork 1 "hw"
#}

test_watchpoint_across_vfork 0 "sw"

exit $GRET
interact
