#!/usr/bin/expect -f 
# Copyright (C) 2011-2012 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
set BRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

#send "\n"
#expect {
#    -timeout 2
#    -re "ONT*" {
#    set BRET [expr $BRET + 1]     
#    }
#    -re "MXU*" {
#    set BRET [expr $BRET + 1]     
#    }
#}

set target_prompt "/tmp/for_gdb_test/base_test"
gdb_test "cd /tmp/for_gdb_test/base_test" "$target_prompt"
# Manipulation with PID on target is not supported.
#if [is_remote target] then {
#    return 0
#}

set testfile attach-pie-noexec
set executable ${testfile}
set binfile ${executable}

#if { [prepare_for_testing ${testfile}.exp $executable "" [list debug "additional_flags=-fPIE -pie"]] } {
#    return -1
#}

#clean_restart $executable
gdb_test "'$GDB_TOOL_DIR'gdb $executable" "$gdb_prompt"
set arch ""
set test "show architecture"
send "$test\n"
expect {
    -re "The target architecture is set automatically \\(currently (.*)\\).*$gdb_prompt" {
	set arch $expect_out(1,string)
#	pass $test
    }
}
if ![runto_main] {
    exit -1
}
set test "sanity check info shared"
gdb_test "info shared" "From\[ \t\]+To\[ \t\]+Syms Read\[ \t\]+Shared Object Library\r\n0x.*$gdb_prompt" 
gdb_exit

if {$arch == ""} {
#    untested ${testfile}.exp
    exit -2
}

    set testpid 0
    send "./$binfile & \n"
    expect {
        -timeout 2
        -re "\\\[1\\\] (\[0-9\]+).*$target_prompt" {
        set testpid $expect_out(1,string)
        }
        timeout {
        }
    }

    if { $testpid == 0 } {
        if { $BRET == 1 } {
        send "ps | grep attach-pie- |grep -v \"grep attach-pie-\" \n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) root.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
        }
        } else {
        send "ps -e | grep attach-pie- |grep -v \"grep attach-pie-\" \n"
        expect {
            -timeout 2
            -re "(\[0-9\]+) pts.*$target_prompt" {
                set testpid $expect_out(1,string)
            }
            timeout {
                send_user "fail \n"
                set GRET [expr $GRET + 1]
            }
         }
       }

    }
    # Avoid some race:
    sleep 2

    send_user "testpid = $testpid \n"
#set testpid [eval exec $binfile &]
#exec sleep 2
#send "rm -rf $binfile \n"
gdb_test "'$GDB_TOOL_DIR'gdb" "$gdb_prompt"
file delete -- $binfile
gdb_test "shell rm -rf $binfile" "$gdb_prompt"
#file delete -- $binfile
gdb_test "attach $testpid" "Attaching to process $testpid\r\n.*: No such file or directory\\." "attach"
gdb_test "set architecture $arch" "The target architecture is assumed to be $arch"
gdb_test "info shared" "From\[ \t\]+To\[ \t\]+Syms Read\[ \t\]+Shared Object Library\r\n.*0x.*"

gdb_exit
gdb_test "kill -9 $testpid" "$target_prompt"
exit $GRET

interact
