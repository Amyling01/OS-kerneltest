#!/usr/bin/expect -f 
# Copyright 1992-2000, 2004-2005, 2007-2012 Free Software Foundation,
# Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This file is based on corefile.exp which was written by Fred
# Fish. (fnf@cygnus.com)

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base_test"
gdb_test "cd /tmp/for_gdb_test/base_test" "$target_prompt"

set testfile "bigcore"
set srcfile ${testfile}.c
set binfile ${testfile}
set corefile ${testfile}.corefile

##if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#     untested bigcore.exp
#     return -1
#}

# Run GDB on the bigcore program up-to where it will dump core.

gdb_test "'$GDB_TOOL_DIR'gdb $binfile" "$gdb_prompt"
gdb_test_no_output "set print sevenbit-strings"
gdb_test_no_output "set width 0"

if { ![runto_main] } then {
#    gdb_suppress_tests;
    exit -1
}
set print_core_line [gdb_get_line_number "Dump core"]
gdb_test "tbreak $print_core_line"
gdb_test continue ".*print_string.*"
gdb_test next ".*0 = 0.*"

# Traverse part of bigcore's linked list of memory chunks (forward or
# backward), saving each chunk's address.

proc extract_heap { dir } {
    global gdb_prompt
    global expect_out GRET
    set heap ""
    set test "extract ${dir} heap"
    set lim 0
    send "print heap.${dir}\n" 
    expect {
	-re " = \\(struct list \\*\\) 0x0.*$gdb_prompt" {
#	    pass "$test"
	}
	-re " = \\(struct list \\*\\) (0x\[0-9a-f\]*).*$gdb_prompt" {
	    set heap [concat $heap $expect_out(1,string)]
	    if { $lim >= 200 } {
#		pass "$test (stop at $lim)"
	    } else {
		incr lim
		send_gdb "print \$.${dir}\n"
		exp_continue
	    }
	}
	timeout {
        set GRET [expr $GRET + 1]
	    send_user "$test (timeout)"
	}
    }
    return $heap;
}
set next_heap [extract_heap next]
set prev_heap [extract_heap prev]

# Save the total allocated size within GDB so that we can check
# the core size later.
gdb_test_no_output "set \$bytes_allocated = bytes_allocated" "save heap size"

# Now create a core dump

# Rename the core file to "TESTFILE.corefile" rather than just "core",
# to avoid problems with sys admin types that like to regularly prune
# all files named "core" from the system.

# Some systems append "core" to the name of the program; others append
# the name of the program to "core"; still others (like Linux, as of
# May 2003) create cores named "core.PID".

# Save the process ID.  Some systems dump the core into core.PID.
set test "grab pid"
send "info program\n" 
expect {
    -re "child process (\[0-9\]+).*$gdb_prompt" {
	set inferior_pid $expect_out(1,string)
#	pass $test
    }
    -re "$gdb_prompt" {
	set inferior_pid unknown
#	pass $test
    }
}

# Dump core using SIGABRT
set oldtimeout $timeout
set timeout 600
gdb_test "signal SIGABRT" "Program terminated with signal SIGABRT, .*"
set timeout $oldtimeout

# Find the corefile
set file ""
foreach pat [list core.${inferior_pid} ${testfile}.core core] {
    set names [glob -nocomplain $pat]
    if {[llength $names] == 1} {
	set file [lindex $names 0]
	gdb_test "shell mv $file $corefile" "$gdb_prompt"
	break
    }
}

if { $file == "" } {
    send_user "Can't generate a core file"
    exit -2
}

# Check that the corefile is plausibly large enough.  We're trying to
# detect the case where the operating system has truncated the file
# just before signed wraparound.  TCL, unfortunately, has a similar
# problem - so use catch.  It can handle the "bad" size but not
# necessarily the "good" one.  And we must use GDB for the comparison,
# similarly.

if {[catch {file size $corefile} core_size] == 0} {
    set core_ok 0
    send "print \$bytes_allocated < $core_size\n" 
    expect {
	-re " = 1.*$gdb_prompt" {
#	    pass "check core size"
	    set core_ok 1
	}
	-re " = 0.*$gdb_prompt" {
#	    pass "check core size"
	    set core_ok 0
	}
    }
} { 
    # Probably failed due to the TCL build having problems with very
    # large values.  Since GDB uses a 64-bit off_t (when possible) it
    # shouldn't have this problem.  Assume that things are going to
    # work.  Without this assumption the test is skiped on systems
    # (such as i386 GNU/Linux with patched kernel) which do pass.
#    pass "check core size"
    set core_ok 1
}
if {! $core_ok} {
    send_user "check core size (system does not support large corefiles)"
    exit -3
}

# Now load up that core file

set test "load corefile"
send "core $corefile\n"
expect {
    -re "A program is being debugged already.  Kill it. .y or n." {
	send_gdb "y\n"
	exp_continue
    }
    -re "Core was generated by.*$gdb_prompt" {
#	pass "$test"
    }
}

# Finally, re-traverse bigcore's linked list, checking each chunk's
# address against the executable.  Don't use gdb_test_multiple as want
# only one pass/fail.  Don't use exp_continue as the regular
# expression involving $heap needs to be re-evaluated for each new
# response.

proc check_heap { dir heap } {
    global gdb_prompt
    set test "check ${dir} heap"
    set ok 1
    set lim 0
    send_gdb "print heap.${dir}\n"
    while { $ok } {
	expect {
	    -re " = \\(struct list \\*\\) [lindex $heap $lim].*$gdb_prompt" {
		if { $lim >= [llength $heap] } {
#		    pass "$test"
		    set ok 0
		} else {
		    incr lim
		    send_gdb "print \$.${dir}\n"
		}
	    }
	    -re ".*$gdb_prompt" {
		send_user "fail $test (address [lindex $heap $lim])"
        set GRET [expr $GRET + 1]
		set ok 0
	    }
	    timeout {
		send_user "$test (timeout)"
        set GRET [expr $GRET + 1]
		set ok 0
	    }
	}
    }
}

check_heap next $next_heap
check_heap prev $prev_heap
exit $GRET

interact
