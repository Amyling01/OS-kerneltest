#!/usr/bin/expect -f 
# Copyright (C) 2011-2012 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/base_test"
gdb_test "cd /tmp/for_gdb_test/base_test" "$target_prompt"
set testfile async-shell

#if { ![support_displaced_stepping] } { 
#    unsupported "displaced stepping"
#    return -1
#}

# The testfile uses "run".  The real bug happened only for ![is_remote target].
#if [target_info exists use_gdb_stub] {
#    return 0
#}

#if { [prepare_for_testing ${testfile}.exp ${testfile}] } {
#    return -1
#}

gdb_test "'$GDB_TOOL_DIR'gdb ${testfile} " "$gdb_prompt"

gdb_test_no_output "set target-async on "
gdb_test_no_output "set non-stop on"
gdb_test "run &" "Starting program: \[^\r\n\]*"

# `sleep 5' here would workaround the bug, do not sleep here.
# "shell" could eat waitpid event from the asynchronous inferior process.

gdb_test "" "$gdb_prompt"
gdb_test "shell echo foo" "foo"

set test "interrupt"
gdb_test "$test"  "interrupt.*$gdb_prompt" 

set test "process stopped"
gdb_test "" ".*\\\[process \[0-9\]+\\\].*#1 stopped\\\..*" 

exit $GRET

interact
