#!/usr/bin/expect -f 
# This testcase is part of GDB, the GNU debugger.

# Copyright 2004, 2007-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

gdb_test "cd /tmp/for_gdb_test/threads" "$target_prompt*"

# This test verifies that a macro using backtrace can be applied to all threads
# and will continue for each thread even though an error may occur in
# backtracing one of the threads.

set testfile "threadapply"
set srcfile ${testfile}.c
set binfile ${testfile}
#if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable [list debug "incdir=${objdir}"]] != "" } {
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}
gdb_test "'$GDB_TOOL_DIR'gdb $binfile" "$GDBPROMPT"
gdb_test_no_output "set height 500"

#
# Run to `main' where we begin our tests.
#

if ![runto_main] then {
#    gdb_suppress_tests
    exit -1
}

# Break after all threads have been started.
set break_line [gdb_get_line_number "Break here"]
gdb_test "b $break_line" ".*"
gdb_test "continue"

send "define backthread\n" 
expect {
  -re "Type commands for definition of \"backthread\".*End with a line saying just \"end\"" {
    send "bt\np/x 20\nend\n"
    expect {
      -re "$gdb_prompt" {
#        pass "macro details"
      }
    }
#    pass "defining macro"
  }
  timeout
  {
    set GRET [expr $GRET + 1]
  }
}

# Cause backtraces to fail by setting a limit.  This allows us to
# verify that the macro can get past the backtrace error and perform
# subsequent commands.
gdb_test_no_output "set backtrace limit 3"
gdb_test "thread apply all backthread" "Thread ..*\\\$\[0-9]+ = 0x14.*Thread ..*\\\$\[0-9]+ = 0x14.*Thread ..*\\\$\[0-9]+ = 0x14.*Thread ..*\\\$\[0-9]+ = 0x14.*Thread ..*\\\$\[0-9]+ = 0x14.*Thread ..*\\\$\[0-9]+ = 0x14"

# Go into the thread_function to check that a simple "thread apply"
# does not change the selected frame.
gdb_test "step" "thread_function.*" "step to the thread_function"
gdb_test "up" ".*in main.*" "go up in the stack frame" 
gdb_test "thread apply all print 1"  "Thread ..*\\\$\[0-9]+ = 1.*Thread ..*\\\$\[0-9]+ = 1.*Thread ..*\\\$\[0-9]+ = 1.*Thread ..*\\\$\[0-9]+ = 1.*Thread ..*\\\$\[0-9]+ = 1.*Thread ..*\\\$\[0-9]+ = 1" "run a simple print command on all threads"
gdb_test "down" "#0.*thread_function.*" "go down and check selected frame"
exit $GRET

interact
