#!/usr/bin/expect -f 
# Copyright (C) 2008-2012 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test handling of threads across an execl.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        exit 1
    }
}

gdb_test "cd /tmp/for_gdb_test/threads" "$target_prompt*"

# Original image, loads a thread library.
set testfile "execl"
set srcfile ${testfile}.c
set binfile ${testfile}

#if {[gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#    return -1
#}

# New image, that does not load a thread library.
set testfile1 "execl1"
set srcfile1 ${testfile1}.c
set binfile1 ${testfile1}

#if {[gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile1}" executable {debug}] != "" } {
#    return -1
#}

#gdb_exit
#gdb_start
#gdb_reinitialize_dir $srcdir/$subdir
#gdb_load ${binfile}
gdb_test "'$GDB_TOOL_DIR'gdb ${binfile}" "$GDBPROMPT"

runto_main

gdb_test "b [gdb_get_line_number "breakpoint here"]" \
         ".*Breakpoint .*execl.*" "set breakpoint at execl"

gdb_test "continue" ".*breakpoint here.*" "continue to exec"

gdb_test "info threads" ".*3 *Thread.*2 *Thread.*1 *Thread.*" "info threads before exec"

# When continuing from this point we'll hit the breakpoint in main()
# again, this time in the exec'd process.
gdb_test "continue" ".*Breakpoint 1, main.*" \
    "continue across exec"

gdb_test "info threads" ".*" "info threads after exec"

set test "info threads after exec"
send "info threads\n" 
expect {
    -re "2 *Thread .*$gdb_prompt $" {
	# Old threads left behind.
	send_user "fail $test"
    set GRET [expr $GRET + 1]
    }
    -re "4 *Thread .*$gdb_prompt $" {
	# New threads registered.
	send_user "fail $test"
    set GRET [expr $GRET + 1]
    }
    -re "$gdb_prompt $" {
	# Target doesn't register the main thread, pass for now.
#	pass "$test"
    }
}

gdb_continue_to_end
exit $GRET

interact
