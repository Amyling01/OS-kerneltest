#!/usr/bin/expect -f 
# Copyright 2011-2012 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

source ../lib/gdb_proc.exp
global target_dir
global GRET;
set GRET 0;
global ARGC;
global GDB_TOOL_DIR
set ARGC $argc
global GDBPROMPT
global gdb_prompt
global target_ip
global target_prompt
global inferior_exited_re

global thread0 
global thread1
spawn ssh root@$target_ip
expect {
    -timeout 2
    -re "$target_prompt*" {}
timeout {
        send_user "\n*****error: ssh root@$target_ip failed*****\n"
        set GRET [expr $GRET + 1]
        exit 1
    }
}

set target_prompt "/tmp/for_gdb_test/threads"
gdb_test "cd /tmp/for_gdb_test/threads" "$target_prompt"
# Are we on a target board?  And non-Linux targets seem to identify the thread
# differently.

set testfile "corethreads"
set srcfile ${testfile}.c
set executable ${testfile}
set binfile ${executable}
#if { [gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
#     untested ${testfile}.exp
#     return -1
#}

set corefile core
gdb_test "echo \"./core\"> /proc/sys/kernel/core_pattern" "$target_prompt"
gdb_test "rm -rf core" "$target_prompt"
gdb_test "echo 0 > /proc/sys/kernel/core_uses_pid" "$target_prompt"
gdb_test "ulimit -c unlimited" "$target_prompt"
gdb_test "export LD_LIBRARY_PATH=$target_prompt" "$target_prompt"
gdb_test "./corethreads" "Aborted.*$target_prompt"
#clean_restart $executable

gdb_test "'$GDB_TOOL_DIR'gdb corethreads core" "$GDBPROMPT"
gdb_test "core-file $corefile" "Core was generated by.*" "load core"
#gdb_test "info files" "\r\nLocal core dump file:\r\n.*" "sanity check we see the core file"

set test "print pthread_t of thread0"
send "p/x thread0\n" 
expect {
    -re " = (0x\[0-9a-f\]+).*$GDBPROMPT" {
#	pass $test
	set thread0 $expect_out(1,string)
    send_user "thread0 = $thread0\n"
    }
}
set test "print pthread_t of thread1"
send "p/x thread1\n" 
expect {
    -re " = (0x\[0-9a-f\]+).*$GDBPROMPT" {
#	pass $test
	set thread1 $expect_out(1,string)
    send_user "thread1 = $thread1\n"
    }
}

#gdb_test "info threads" ".*Thread $thread0 .*" "thread0 found"
#gdb_test "info threads" ".*Thread $thread1 .*" "thread1 found"
gdb_test "info threads" ".*Id.*Target.*Id.*Frame.*" "no other thread found"
gdb_test "thread 2" "#0*" "no other thread found"
gdb_test "bt" "#0" "no other thread found"
gdb_test "thread 1" "#0*" "no other thread found"
gdb_test "bt" "#0" "no other thread found"
exit $GRET

interact
